<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端jQuery</title>
    <link href="/2023/04/17/jQuery/"/>
    <url>/2023/04/17/jQuery/</url>
    
    <content type="html"><![CDATA[<p>常用css：</p><p>text-align:center;</p><p>border: 1px solid black;</p><p>display:inline-block&#x2F;block;</p><p>JQuery:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&quot;#id&quot;</span>).css(‘属性’,’值’)  <span class="hljs-comment">//设置css样式</span><br>$(<span class="hljs-string">&quot;.class&quot;</span>)        <br>$(<span class="hljs-string">&quot;li.current&quot;</span>)交集<br><br>$(<span class="hljs-string">&quot;li.first/last/eq(index)/odd奇/even偶&quot;</span>)<span class="hljs-comment">//获取索引元素</span><br><br>$(<span class="hljs-string">&quot;li&quot;</span>).parent()父级<br>$(<span class="hljs-string">&quot;ul&quot;</span>).children(<span class="hljs-string">&quot;li&quot;</span>)<span class="hljs-comment">//最近一级子元素</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/input.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">     $(<span class="hljs-string">&quot;#submit&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">var</span> t = $(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (t == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-comment">//错误信息</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">          $(<span class="hljs-string">&quot;#error&quot;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;&lt;div style=&quot;color: #ff0000&quot;&gt;输入框不能为空！&lt;/div&gt;&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[0-9]+$/</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (reg.<span class="hljs-title function_">test</span>(t)) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#error&quot;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;&lt;div style=&quot;color: #ff0000&quot;&gt;你的输入不合法&lt;/div&gt;&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">          &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;product.html&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#search&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> t = $(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">                $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://114.67.241.121:8080/product/list&quot;</span>, &#123;</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;data&quot;</span>: t</span><br><span class="language-javascript">                &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                    <span class="hljs-comment">//生成表格</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> data <span class="hljs-keyword">of</span> result.<span class="hljs-property">data</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">var</span> brand = data[<span class="hljs-string">&quot;brand&quot;</span>];</span><br><span class="language-javascript">                        <span class="hljs-keyword">var</span> model = data[<span class="hljs-string">&quot;model&quot;</span>];</span><br><span class="language-javascript">                        <span class="hljs-keyword">var</span> price = data[<span class="hljs-string">&quot;price&quot;</span>];</span><br><span class="language-javascript">                        <span class="hljs-keyword">var</span> img = data[<span class="hljs-string">&quot;image&quot;</span>];</span><br><span class="language-javascript">                        <span class="hljs-keyword">var</span> txt1 = <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="language-javascript">                            <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + <span class="hljs-string">&quot;&lt;img src=&quot;</span> + <span class="hljs-string">&quot;&#x27;http://114.67.241.121:8080/img/&quot;</span> + img + <span class="hljs-string">&quot;&#x27;&gt;&lt;/td&gt;&quot;</span> +</span><br><span class="language-javascript">                            <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + brand + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="language-javascript">                            <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + <span class="hljs-string">&quot;&lt;a style=&#x27;color:#00ff00; :hover &#123;color:red; &#125;&#x27; href=&#x27;http://114.67.241.121:8080/img/&quot;</span> + img + <span class="hljs-string">&quot;&#x27;&gt;&quot;</span> + model + <span class="hljs-string">&quot;&lt;/a&gt;&lt;/td&gt;&quot;</span> +</span><br><span class="language-javascript">                            <span class="hljs-string">&quot;&lt;td style=&#x27;background:#ffffd0;&#x27;&gt;&quot;</span> + price + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="language-javascript">                            <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="language-javascript">                        $(<span class="hljs-string">&quot;#product tbody&quot;</span>).<span class="hljs-title function_">append</span>(txt1);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#table tr:odd&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;yellow&quot;</span>);</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#table tr:even&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;white&quot;</span>);</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;input:radio[name=&quot;rd&quot;]&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;input[type=&#x27;radio&#x27;]&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">is</span>(<span class="hljs-string">&quot;:checked&quot;</span>)) &#123;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;#table tr:odd&quot;</span>).<span class="hljs-title function_">attr</span>(&#123;</span><br><span class="language-javascript">                        <span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;yellow&quot;</span></span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;#table tr:even&quot;</span>).<span class="hljs-title function_">attr</span>(&#123;</span><br><span class="language-javascript">                        <span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;white&quot;</span></span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;#&quot;</span> + $(<span class="hljs-string">&quot;input[name=&#x27;rd&#x27;]:checked&quot;</span>).<span class="hljs-title function_">val</span>()).<span class="hljs-title function_">attr</span>(&#123;</span><br><span class="language-javascript">                        <span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;selection&quot;</span></span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#table tr:odd&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;yellow&quot;</span>);</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#table tr:even&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;white&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#check_input&quot;</span>).<span class="hljs-title function_">keyup</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> text = $(<span class="hljs-string">&quot;#check_input&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;tr[name=&#x27;data&#x27;]&quot;</span>).<span class="hljs-title function_">hide</span>();</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;tr[name=&#x27;data&#x27;]&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-string">&quot;:contains(&#x27;&quot;</span> + text + <span class="hljs-string">&quot;&#x27;)&quot;</span>).<span class="hljs-title function_">show</span>();</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();</span><br><span class="language-javascript">        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;请选择...&quot;</span>, <span class="hljs-string">&quot;石家庄&quot;</span>, <span class="hljs-string">&quot;邯郸&quot;</span>, <span class="hljs-string">&quot;唐山&quot;</span>, <span class="hljs-string">&quot;张家口&quot;</span>, <span class="hljs-string">&quot;廊坊&quot;</span>);</span><br><span class="language-javascript">        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;请选择...&quot;</span>, <span class="hljs-string">&quot;沈阳&quot;</span>, <span class="hljs-string">&quot;大连&quot;</span>, <span class="hljs-string">&quot;鞍山&quot;</span>, <span class="hljs-string">&quot;抚顺&quot;</span>);</span><br><span class="language-javascript">        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;请选择...&quot;</span>, <span class="hljs-string">&quot;济南&quot;</span>, <span class="hljs-string">&quot;烟台&quot;</span>, <span class="hljs-string">&quot;青岛&quot;</span>, <span class="hljs-string">&quot;枣庄&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#province&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> city = $(<span class="hljs-string">&quot;#city&quot;</span>);</span><br><span class="language-javascript">            city.<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> list = arr[$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>()];</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                str += <span class="hljs-string">&#x27;&lt;option value=&#x27;</span> + list[i] + <span class="hljs-string">&#x27;&gt;&#x27;</span> + list[i] + <span class="hljs-string">&#x27;&lt;/option&gt;&#x27;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            city.<span class="hljs-title function_">html</span>(str);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> name = $(<span class="hljs-string">&quot;input[name=&#x27;name&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> email = $(<span class="hljs-string">&quot;input[name=&#x27;email&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> salary = $(<span class="hljs-string">&quot;input[name=&#x27;salary&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> newRow = <span class="hljs-string">&quot;&lt;tr id=&quot;</span> + name + <span class="hljs-string">&quot;&gt;&lt;td&gt;&quot;</span> + name + <span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + email + <span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + salary + <span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&lt;a href=&#x27;#&#x27; onclick=&#x27;removeRow(this)&#x27;&gt;Delete&lt;/a&gt;&lt;/td&gt;&quot;</span>;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#table tr:last&quot;</span>).<span class="hljs-title function_">after</span>(newRow);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">removeRow</span>(<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">        $(item).<span class="hljs-title function_">closest</span>(<span class="hljs-string">&quot;tr&quot;</span>).<span class="hljs-title function_">remove</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css笔记：<a href="http://t.csdn.cn/fP1DO">http://t.csdn.cn/fP1DO</a></p><p>jquery笔记： <a href="http://t.csdn.cn/nZxmY">http://t.csdn.cn/nZxmY</a></p><p>ajax：<a href="http://t.csdn.cn/rLTEi">http://t.csdn.cn/rLTEi</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅学后端——JavaWeb篇</title>
    <link href="/2022/07/27/JavaWeb/"/>
    <url>/2022/07/27/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaWeb笔记篇"><a href="#JavaWeb笔记篇" class="headerlink" title="JavaWeb笔记篇"></a>JavaWeb笔记篇</h2><h4 id="1-Maven——项目架构管理工具"><a href="#1-Maven——项目架构管理工具" class="headerlink" title="1.Maven——项目架构管理工具"></a>1.Maven——项目架构管理工具</h4><ul><li><p>Maven的核心思想：<strong>约定大于配置</strong></p></li><li><p>Maven的本质是一个项目管理工具，讲项目开发和管理过程抽象成一个项目对象模型（POM）。</p></li></ul><p>作用：</p><ol><li>项目构建：提供标准的、跨平台的自动化项目构建方式。</li><li>依赖管理：方便快捷的管理项目的资源（jar包），避免资源间的版本冲突问题。</li><li>统一开发结构：提供标准的、统一的项目结构。</li></ol><h5 id="1-1下载与配置"><a href="#1-1下载与配置" class="headerlink" title="1.1下载与配置"></a>1.1下载与配置</h5><ul><li><p>下载地址：<a href="https://maven.apache.org/download.cgi%EF%BC%8CLinux%E9%80%89%E6%8B%A9tar.gz%EF%BC%8CWindows%E9%80%89%E6%8B%A9zip%EF%BC%8C">https://maven.apache.org/download.cgi，Linux选择tar.gz，Windows选择zip，</a></p></li><li><p>环境配置：新建系统变量MAVEN_HOME，在Path配置%MAVEN_HOME%\bin</p></li><li><p>检测配置成功：cmd-&gt;mvn</p></li></ul><h5 id="1-2坐标"><a href="#1-2坐标" class="headerlink" title="1.2坐标"></a>1.2坐标</h5><p>Maven中的坐标用于描述<strong>仓库中资源的位置</strong>。<a href="https://repo1.maven.org/maven2">https://repo1.maven.org/maven2</a></p><p><strong>Maven坐标主要组成</strong>：</p><ul><li>grounpId：定义当前Maven项目隶属组织名称（通常是域名反写）。</li><li>artifactId：定义当前Maven项目名称（通常是模块名称）。</li><li>version：定义当前版本号</li><li>packaging：定义该项目的打包方式</li></ul><p><strong>作用</strong>：使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的表示与下载工作交由机器完成。</p><h5 id="1-3构建命令"><a href="#1-3构建命令" class="headerlink" title="1.3构建命令"></a>1.3构建命令</h5><ul><li>mvn compile——编译</li><li>mvn clean——清理</li><li>mvn test——测试</li><li>mvn package——打包</li><li>mvn install——安装到本地仓库</li></ul><h5 id="1-4项目结构"><a href="#1-4项目结构" class="headerlink" title="1.4项目结构"></a>1.4项目结构</h5><p>1）目录文件</p><p>main，test</p><p>2）与src平级创建pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定pom的模型模板--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--打包方式，web为war，java为jar--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>所属组群<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>所属项目<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>版本号<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>项目最后的作用<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>要导入的jar包名称<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>版本号<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-Servlet"><a href="#2-Servlet" class="headerlink" title="2.Servlet"></a>2.Servlet</h4><h5 id="2-1HelloWorld案例"><a href="#2-1HelloWorld案例" class="headerlink" title="2.1HelloWorld案例"></a>2.1HelloWorld案例</h5><p><strong>思路：</strong><br><img src="https://s2.loli.net/2022/07/27/acUyHFSkAB1RbKY.png" alt="思路.png"></p><ol><li>创建动态Web module<br><img src="https://s2.loli.net/2022/07/27/AfEmYbscK7Z9a3k.png" alt="创建.png"></li><li>创建超链接</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- /Web应用地址/Servlet地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/app/helloServlet&quot;</span>&gt;</span>Servlet Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建Java类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 控制台打印，证明这个方法被调用了</span><br>        System.out.println(<span class="hljs-string">&quot;我是HelloServlet，我执行了！&quot;</span>);<br><br>        <span class="hljs-comment">// 返回响应字符串</span><br>        <span class="hljs-comment">// 1、获取能够返回响应数据的字符流对象</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> servletResponse.getWriter();<br><br>        <span class="hljs-comment">// 2、向字符流对象写入数据</span><br>        writer.write(<span class="hljs-string">&quot;Hello,I am Servlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>配置HelloServlet</li></ol><p>web.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置Servlet本身 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 全类名太长，给Servlet设置一个简短名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置Servlet的全类名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atguigu.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 将Servlet和访问地址关联起来 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/helloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>『虚拟路径』：Servlet并<strong>不是</strong>文件系统中<strong>实际存在</strong>的<strong>目录或文件</strong>，所以为了方便浏览器访问，我们创建了虚拟出来的路径来访问它。</p><p><img src="https://s2.loli.net/2022/07/27/sXqkEvP731tUCwx.png" alt="原理.png"></p><p><img src="https://s2.loli.net/2022/07/27/qLfCkWSAUR6gHmF.png" alt="总结.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Servlet</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅学后端—Spring框架篇</title>
    <link href="/2022/07/21/Spring/"/>
    <url>/2022/07/21/Spring/</url>
    
    <content type="html"><![CDATA[<h5 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h5><p>Spring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。</p><h4 id="1-IOC（控制反转）"><a href="#1-IOC（控制反转）" class="headerlink" title="1. IOC（控制反转）"></a>1. IOC（控制反转）</h4><ol><li><p>把对象创建和对象之间的调用过程，交给Spring进行管理,&#x3D;&#x3D;为了降低耦合度&#x3D;&#x3D;</p></li><li><p>IOC底层:xml解析、工厂模式、反射</p></li><li><p>Spring提供的IOC容器实现的两种方式（两个接口）</p></li></ol><p>a）<strong>BeanFactory</strong>接口：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用（加载配置文件时候不会创建对象，在获取对象时才会创建对象。）<br>b）<strong>ApplicationContext</strong>接口：BeanFactory接口的子接口，提供更多更强大的功能，提供给开发人员使用（加载配置文件时候就会把在配置文件对象进行创建）推荐使用！</p><h5 id="1-1-Bean管理"><a href="#1-1-Bean管理" class="headerlink" title="1.1 Bean管理"></a>1.1 Bean管理</h5><h6 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h6><p>（1）基于xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1 配置User对象创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//1.加载配置文件</span><br>BeanFactory context = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beanl.xml&quot;</span>)</span>;<br><span class="hljs-comment">//2.获取对象  </span><br>User user = context.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;user&quot;</span>,User.<span class="hljs-params">class</span>)</span>;<br></code></pre></td></tr></table></figure><p>（2）基于注解方式</p><ol><li>引入依赖 （引入spring-aop jar包）</li><li>开启组件扫描<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启组件扫描</span><br><span class="hljs-comment"> 1 如果扫描多个包，多个包使用逗号隔开</span><br><span class="hljs-comment"> 2 扫描包上层目录</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>创建类，在类上面添加创建对象注解<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//在注解里面 <span class="hljs-keyword">value</span> 属性值可以省略不写，<br>//默认值是类名称，首字母小写<br>//UserService <span class="hljs-comment">-- userService</span><br>@Component(<span class="hljs-keyword">value</span> = &quot;userService&quot;) //注解等同于<span class="hljs-type">XML</span>配置文件：&lt;bean id=&quot;userService&quot; <span class="hljs-keyword">class</span>=&quot;..&quot;/&gt;<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> UserService &#123;<br> <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">add</span>() &#123;<br> <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;service add.......&quot;);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>开启组件扫描细节配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--示例 1</span><br><span class="hljs-comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span><br><span class="hljs-comment"> context:include-filter ，设置扫描哪些内容</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span> <span class="hljs-attr">use-defaultfilters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--代表只扫描Controller注解的类--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!--示例 2</span><br><span class="hljs-comment"> 下面配置扫描包所有内容</span><br><span class="hljs-comment"> context:exclude-filter： 设置哪些内容不进行扫描</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h6><p>（1）基于xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--（1）set方法注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使用property完成属性注入   name：类里面属性名称   value：向属性注入的值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;World&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--（2）有参数构造注入属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hello&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;China！&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--空值/特殊符号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--（1）null值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-comment">&lt;!--属性里边添加一个null标签--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--（2）特殊符号赋值--&gt;</span><br>     <span class="hljs-comment">&lt;!--属性值包含特殊符号   a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;    b 把带特殊符号内容写到CDATA--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--外部bean--&gt;</span><br><span class="hljs-comment">&lt;!--1 service和dao对象创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入userDao对象</span><br><span class="hljs-comment">        name属性：类里面属性名称</span><br><span class="hljs-comment">        ref属性：创建userDao对象bean标签id值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--内部bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Emp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置两个普通属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Andy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置对象类型属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Dept&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--内部bean赋值--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;宣传部门&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）基于注解方式<br>a）@Autowired：根据属性类型进行自动装配</p><ol><li>把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解。</li><li>在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br> <span class="hljs-comment">//定义 dao 类型属性</span><br> <span class="hljs-comment">//不需要添加 set 方法</span><br> <span class="hljs-comment">//添加注入属性注解</span><br> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> <span class="hljs-title class_">UserDao</span> userDao;<br> <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;service add.......&quot;</span>);<br> userDao.<span class="hljs-title function_">add</span>();<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//Dao实现类</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-comment">//@Repository(value = &quot;userDaoImpl1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;dao add.....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>b） @Qualifier：根据名称进行注入，这个@Qualifier 注解的使用，和上面@Autowired 一起使用<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//定义 dao 类型属性</span><br><span class="hljs-comment">//不需要添加 set 方法</span><br><span class="hljs-comment">//添加注入属性注解</span><br><span class="hljs-variable">@Autowired</span> <span class="hljs-comment">//根据类型进行注入</span><br><span class="hljs-comment">//根据名称进行注入（目的在于区别同一接口下有多个实现类，根据类型就无法选择，从而出错！）</span><br><span class="hljs-variable">@Qualifier</span>(value = <span class="hljs-string">&quot;userDaoImpl1&quot;</span>) <br>private UserDao userDao;<br></code></pre></td></tr></table></figure>c） @Resource：可以根据类型注入，也可以根据名称注入（它属于javax包下的注解，不推荐使用！）<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>@Resource <span class="hljs-regexp">//</span>根据类型进行注入<br>@Resource(name = <span class="hljs-string">&quot;userDaoImpl1&quot;</span>) <span class="hljs-regexp">//</span>根据名称进行注入<br>private UserDao userDao;<br></code></pre></td></tr></table></figure>d） @Value：注入普通类型属性<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Value(value = <span class="hljs-string">&quot;abc&quot;</span>)</span><br><span class="hljs-keyword">private</span> String name<br></code></pre></td></tr></table></figure></li></ol><h6 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h6><p>1）创建配置类，替代 xml 配置文件</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span> <span class="hljs-comment">//作为配置类，替代 xml 配置文件</span><br><span class="hljs-variable">@ComponentScan</span>(basePackages = &#123;<span class="hljs-string">&quot;com.atguigu&quot;</span>&#125;)<br>public class SpringConfig &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>2）编写测试类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@Test<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testService2</span>()</span> &#123;<br> <span class="hljs-comment">//加载配置类</span><br> ApplicationContext context<br> = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.<span class="hljs-keyword">class</span>);<br> UserService userService = context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,<br>UserService.<span class="hljs-keyword">class</span>);<br> System.<span class="hljs-keyword">out</span>.println(userService);<br> userService.<span class="hljs-keyword">add</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-AOP-面向切面编程"><a href="#2-AOP-面向切面编程" class="headerlink" title="2. AOP(面向切面编程)"></a>2. AOP(面向切面编程)</h4><p>利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得 业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。<br>通俗描述：<strong>不通过修改源代码方式，在主干功能里面添加新功能</strong></p><h6 id="术语："><a href="#术语：" class="headerlink" title="术语："></a>术语：</h6><table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>连接点</td><td>类里面哪些方法可以被增强，这些方法称为连接点</td></tr><tr><td>切入点</td><td>实际被真正增强的方法称为切入点</td></tr><tr><td>切面</td><td>把通知应用到切入点过程</td></tr><tr><td>通知（增强）</td><td>实际增强的逻辑部分称为通知</td></tr></tbody></table><p>而通知分为五类：1）前置通知 2）后置通知 3）环绕通知 4）异常通知 5）最终通知</p><h5 id="2-1-底层原理"><a href="#2-1-底层原理" class="headerlink" title="2.1 底层原理"></a>2.1 底层原理</h5><ol><li>JDK动态代理</li></ol><p><img src="https://s2.loli.net/2022/07/22/NyJlHcUVL9hqfuX.png" alt="JDK.png"><br>2. CGLIB动态代理</p><p><img src="https://s2.loli.net/2022/07/22/hfF95jMlADJsbm7.png" alt="CGLIB.png"></p><h5 id="2-2-JDK动态代理"><a href="#2-2-JDK动态代理" class="headerlink" title="2.2 JDK动态代理"></a>2.2 JDK动态代理</h5><p>1）使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</p><p>调用 newProxyInstance 方法，方法有三个参数：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">Object</span> newProxyInstance<br>(ClassLoader loader,    <span class="hljs-comment">//类加载器</span><br><span class="hljs-keyword">Class</span>&lt;?&gt;[] interfaces,  <span class="hljs-comment">//增强方法所在的类，这个类实现的接口，支持多个接口</span><br>InvocationHandler h)    <span class="hljs-comment">//实现这个接口 InvocationHandler，创建代理对象，写增强的部分</span><br></code></pre></td></tr></table></figure><p>2）编写 JDK 动态代理代码</p><p>a）创建接口，定义方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> interface UserDao &#123;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">String</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>b）创建接口实现类，实现方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> int <span class="hljs-title function_">add</span>(<span class="hljs-params">int a, int b</span>) &#123;<br> <span class="hljs-keyword">return</span> a+b;<br> &#125;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>) &#123;<br> <span class="hljs-keyword">return</span> id;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>c）使用 Proxy 类创建接口代理对象</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> JDKProxy &#123;<br> public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br> <span class="hljs-comment">//创建接口实现类代理对象</span><br> Class<span class="hljs-literal">[]</span> interfaces = &#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDao</span>.</span></span><span class="hljs-keyword">class</span>&#125;;<br> UserDaoImpl userDao = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UserDaoImpl()</span>; <br><span class="hljs-comment">/** 第一参数，类加载器 </span><br><span class="hljs-comment">第二参数，增强方法所在的类，这个类实现的接口，(支持多个接口)</span><br><span class="hljs-comment">第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分  */</span><br> UserDao dao =(UserDao)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(JDKProxy.<span class="hljs-params">class</span>.<span class="hljs-params">getClassLoader</span>()</span>, interfaces,<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">UserDaoProxy(<span class="hljs-params">userDao</span>)</span>);<br> <span class="hljs-built_in">int</span> result = dao.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;result:&quot;</span>+result);<br> &#125;<br>&#125;<br><br><span class="hljs-comment">//创建代理对象代码</span><br><span class="hljs-keyword">class</span> UserDaoProxy implements InvocationHandler &#123;<br> <span class="hljs-comment">//1 把创建的是谁的代理对象，把谁传递过来</span><br> <span class="hljs-comment">//有参数构造传递</span><br> <span class="hljs-keyword">private</span> Object obj;<br> public <span class="hljs-constructor">UserDaoProxy(Object <span class="hljs-params">obj</span>)</span> &#123;<br> this.obj = obj;<br> &#125;<br> <span class="hljs-comment">//增强的逻辑</span><br> @Override<br> public Object invoke(Object proxy, Method <span class="hljs-keyword">method</span>, Object<span class="hljs-literal">[]</span> args) throws Throwable &#123;<br> <span class="hljs-comment">//方法之前</span><br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;方法之前执行....&quot;</span>+<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot; :传递的参数...&quot;</span>+ <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">args</span>)</span>);<br> <span class="hljs-comment">//被增强的方法执行</span><br> Object res = <span class="hljs-keyword">method</span>.invoke(obj, args);<br> <span class="hljs-comment">//方法之后</span><br> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;方法之后执行....&quot;</span>+obj);<br> return res;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-AOP操作"><a href="#2-3-AOP操作" class="headerlink" title="2.3 AOP操作"></a>2.3 AOP操作</h5><p>Spring 框架一般都是基于 AspectJ 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使 用，进行 AOP 操作。</p><ol><li>而基于 AspectJ 实现 AOP 操作：1）基于 xml 配置文件实现 2）基于注解方式实现（使用）</li><li>引入相关jar包</li><li>切入点表达式，如下：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">（<span class="hljs-number">1</span>）切入点表达式作用：知道对哪个类里面的哪个方法进行增强 <br>（<span class="hljs-number">2</span>）语法结构： <span class="hljs-built_in">execution</span>([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )<br>（<span class="hljs-number">3</span>）例子如下：<br>    例 <span class="hljs-number">1</span>：对 com<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.dao</span><span class="hljs-selector-class">.BookDao</span> 类里面的 add 进行增强<br><span class="hljs-built_in">execution</span>(* com.atguigu.dao.BookDao.add(..))<br> 例 <span class="hljs-number">2</span>：对 com<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.dao</span><span class="hljs-selector-class">.BookDao</span> 类里面的所有的方法进行增强<br><span class="hljs-built_in">execution</span>(* com.atguigu.dao.BookDao.* (..))<br>    例 <span class="hljs-number">3</span>：对 com<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.dao</span> 包里面所有类，类里面所有方法进行增强<br><span class="hljs-built_in">execution</span>(* com.atguigu.dao.*.* (..))<br></code></pre></td></tr></table></figure>具体操作：<br>1、创建类，在类里面定义方法<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">User</span> &#123;<br> <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">add</span>() &#123;<br> <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;add.......&quot;);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>2、创建增强类（编写增强逻辑）<br>（1）在增强类里面，创建方法，让不同方法代表不同通知类型<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//增强的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserProxy</span> &#123;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span>()</span> &#123;<span class="hljs-comment">//前置通知</span><br> System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;before......&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>3、进行通知的配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开启注解扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopanno&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启Aspect生成代理对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//增强的类</span><br><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@Aspect</span>  <span class="hljs-comment">//生成代理对象</span><br>public class UserProxy &#123;&#125;<br><br><span class="hljs-comment">//被增强的类</span><br><span class="hljs-variable">@Component</span><br>public class User &#123;&#125;<br></code></pre></td></tr></table></figure>4、配置不同类型的通知<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>      <span class="hljs-comment">//相同切入点抽取</span><br>    <span class="hljs-meta">@Pointcut(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointdemo</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//前置通知</span><br>    <span class="hljs-comment">//@Before注解表示作为前置通知</span><br>    <span class="hljs-meta">@Before(value = &quot;pointdemo()&quot;)</span><span class="hljs-comment">//相同切入点抽取使用！</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;before.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//后置通知（返回通知）</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//最终通知</span><br>    <span class="hljs-meta">@After(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;after.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//异常通知</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterThrowing.........&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕之前.........&quot;</span>);<br><br>        <span class="hljs-comment">//被增强的方法执行</span><br>        proceedingJoinPoint.proceed();<br><br>        System.out.println(<span class="hljs-string">&quot;环绕之后.........&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h6 id="AspectJ配置文件"><a href="#AspectJ配置文件" class="headerlink" title="AspectJ配置文件"></a>AspectJ配置文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1、创建两个类，增强类和被增强类，创建方法（同上一样）--&gt;</span><br><span class="hljs-comment">&lt;!--2、在 spring 配置文件中创建两个类对象--&gt;</span><br><span class="hljs-comment">&lt;!--创建对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopxml.Book&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookProxy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--3、在 spring 配置文件中配置切入点--&gt;</span><br><span class="hljs-comment">&lt;!--配置 aop 增强--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br> <span class="hljs-comment">&lt;!--切入点--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.atguigu.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span><br> <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookProxy&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!--增强作用在具体的方法上--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅学后端——MyBatis篇</title>
    <link href="/2022/07/21/MyBatis/"/>
    <url>/2022/07/21/MyBatis/</url>
    
    <content type="html"><![CDATA[<p>前言：学习MyBatis前我们需要了解一下Maven是什么：</p><h4 id="0-Maven"><a href="#0-Maven" class="headerlink" title="0.Maven"></a>0.Maven</h4><ul><li>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</li><li>Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</li><li><strong>约定配置</strong>：<br>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：<br><img src="https://s2.loli.net/2022/07/21/uwlHCKGF6VjJyS5.png" alt="dir.png"></li></ul><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h4><p>了解完Maven对后端项目有了初步认识，那么就可以在项目中使用MyBatis了。</p><h6 id="1-创建一个普通的maven项目"><a href="#1-创建一个普通的maven项目" class="headerlink" title="1. 创建一个普通的maven项目"></a>1. 创建一个普通的maven项目</h6><h6 id="2-删除src目录-就可以把此工程当做父工程了，然后创建子工程"><a href="#2-删除src目录-就可以把此工程当做父工程了，然后创建子工程" class="headerlink" title="2. 删除src目录 (就可以把此工程当做父工程了，然后创建子工程)"></a>2. 删除src目录 (就可以把此工程当做父工程了，然后创建子工程)</h6><h6 id="3-导入maven依赖"><a href="#3-导入maven依赖" class="headerlink" title="3. 导入maven依赖"></a>3. 导入maven依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysqlq驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="4-创建一个实体类（例如：USer）"><a href="#4-创建一个实体类（例如：USer）" class="headerlink" title="4. 创建一个实体类（例如：USer）"></a>4. 创建一个实体类（例如：USer）</h6><h6 id="5-创建UserMapper映射文件"><a href="#5-创建UserMapper映射文件" class="headerlink" title="5. 创建UserMapper映射文件"></a>5. 创建UserMapper映射文件</h6><p>mapping约束头：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--    查询操作--&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--    resultType-结果类型--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.mybatis.User&quot;</span>&gt;</span></span><br><span class="language-xml">        select *</span><br><span class="language-xml">        from user</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--    插入插座--&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--  parameterType-参数类型  --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.itheima.mybatis.User&quot;</span>&gt;</span></span><br><span class="language-xml">        insert into user</span><br><span class="language-xml">        values (#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml">, #</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml">, #</span><span class="hljs-template-variable">&#123;password&#125;</span><span class="language-xml">, #</span><span class="hljs-template-variable">&#123;address&#125;</span><span class="language-xml">, #</span><span class="hljs-template-variable">&#123;phone&#125;</span><span class="language-xml">)</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--    修改操作--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.itheima.mybatis.User&quot;</span>&gt;</span></span><br><span class="language-xml">        update user</span><br><span class="language-xml">        set name=#</span><span class="hljs-template-variable">&#123;name &#125;</span><span class="language-xml">,</span><br><span class="language-xml">            password=#</span><span class="hljs-template-variable">&#123;password&#125;</span><span class="language-xml"></span><br><span class="language-xml">        where id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-comment">&lt;!--    删除操作--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="language-xml">        delete from user where id=#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h6 id="6-编写MyBatis核心文件"><a href="#6-编写MyBatis核心文件" class="headerlink" title="6.编写MyBatis核心文件"></a>6.编写MyBatis核心文件</h6><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--    加载外部文件--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--    数据源环境--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.driverClassName&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.username&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.password&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--    加载映射文件--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com.itheima.mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="language-xml"> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h6 id="7-测试代码"><a href="#7-测试代码" class="headerlink" title="7.测试代码"></a>7.测试代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mybatis;<br> <br><span class="hljs-keyword">import</span> com.itheima.mybatis.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: // 类说明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: MyBatisTest    // 类名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 曾伟鸿            // 创建者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2022/1/28 12:23   // 时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: 1.0       // 版本</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br>    <span class="hljs-comment">//    查询操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsFile</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;sqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsFile);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;userMapper.findAll&quot;</span>);<br>        System.out.println(userList);<br>        sqlSession.close();<br>    &#125;<br> <br>    <span class="hljs-comment">//    插入操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setname(<span class="hljs-string">&quot;捞前&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123123a&quot;</span>);<br>        user.setAddress(<span class="hljs-string">&quot;sssss&quot;</span>);<br>        user.setPhone(<span class="hljs-string">&quot;123456789&quot;</span>);<br> <br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsFile</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;sqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsFile);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">insert</span> <span class="hljs-operator">=</span> sqlSession.insert(<span class="hljs-string">&quot;userMapper.save&quot;</span>, user);<br>        System.out.println(insert);<br>        <span class="hljs-comment">// 提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br> <br>    <span class="hljs-comment">//    修改操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">14</span>);<br>        user.setname(<span class="hljs-string">&quot;猪猪&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br> <br> <br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsFile</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;sqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsFile);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> sqlSession.update(<span class="hljs-string">&quot;userMapper.update&quot;</span>, user);<br>        System.out.println(update);<br>        <span class="hljs-comment">// 提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br> <br>    <span class="hljs-comment">//    删除操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">14</span>);<br> <br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsFile</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;sqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsFile);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> sqlSession.delete(<span class="hljs-string">&quot;userMapper.delete&quot;</span>, <span class="hljs-number">14</span>);<br>        System.out.println(delete);<br>        <span class="hljs-comment">// 提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-动态SQL"><a href="#2-动态SQL" class="headerlink" title="2.动态SQL"></a>2.动态SQL</h4><h5 id="if、where标签"><a href="#if、where标签" class="headerlink" title="if、where标签"></a>if、where标签</h5><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--动态Sql : where / if--&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dynamicSql&quot;</span>  <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lks.domain.User&quot;</span>&gt;</span></span><br><span class="language-xml">      select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;tableAllkey&quot;</span>/&gt;</span> from users</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != null and id != 0&quot;</span>&gt;</span></span><br><span class="language-xml">              AND id = #</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="language-xml">              AND name = #</span><span class="hljs-template-variable">&#123;name&#125;</span><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;county != null and county != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="language-xml">              AND county = #</span><span class="hljs-template-variable">&#123;county&#125;</span><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h5><ul><li>item ：循环体中的具体对象。支持属性的点路径访问，如item.age,item.info.details，在list和数组中是其中的对象，在map中是value。</li><li>index ：在list和数组中,index是元素的序号，在map中，index是元素的key，该参数可选。</li><li>open ：表示该语句以什么开始</li><li>close ：表示该语句以什么结束</li><li>separator ：表示元素之间的分隔符，例如在in()的时候，separator&#x3D;”,”会自动在元素中间用“,“隔开，避免手动输入逗号导致sql错误，如in(1,2,)这样。该参数可选。</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- 解决多个条件传值问题 --&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findUserByIds&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;UserIds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span></span><br><span class="language-xml">         select * from user</span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;listIds!=null&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;listIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;id in (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>从结果可以看出，我们一下插入了两条数据，每条数据之间使用“，”进行分割，separator&#x3D;”,” 的作用就是如此。其中&lt; foreach &gt;标签内部的属性务必加上item.。</p><h5 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span><br>     resultType=<span class="hljs-string">&quot;Blog&quot;</span>&gt;<br>  <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> BLOG <span class="hljs-keyword">WHERE</span> state = ‘ACTIVE’<br>  &lt;choose&gt;<br>    &lt;<span class="hljs-keyword">when</span> test=<span class="hljs-string">&quot;title != null&quot;</span>&gt;<br>      <span class="hljs-keyword">AND</span> <span class="hljs-built_in">title</span> <span class="hljs-keyword">like</span> #&#123;<span class="hljs-built_in">title</span>&#125;<br>    &lt;/<span class="hljs-keyword">when</span>&gt;<br>    &lt;<span class="hljs-keyword">when</span> test=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;<br>      <span class="hljs-keyword">AND</span> author_name <span class="hljs-keyword">like</span> #&#123;author.name&#125;<br>    &lt;/<span class="hljs-keyword">when</span>&gt;<br>    &lt;otherwise&gt;<br>      <span class="hljs-keyword">AND</span> featured = <span class="hljs-number">1</span><br>    &lt;/otherwise&gt;<br>  &lt;/choose&gt;<br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h5><ul><li><p>where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。</p></li><li><p>如果 where 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 where 元素的功能。比如，和 where 元素等价的自定义 trim 元素为：<br><code>&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt; ... &lt;/trim&gt;</code></p></li><li><p>prefixOverrides 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。</p></li><li><p>上述例子会移除所有 prefixOverrides 属性中指定的内容，并且插入 prefix 属性中指定的内容。</p></li></ul><p>用于动态更新语句的类似解决方案叫做 set。set 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="language-xml">  update Author</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span>username=#</span><span class="hljs-template-variable">&#123;username&#125;</span><span class="language-xml">,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span>password=#</span><span class="hljs-template-variable">&#123;password&#125;</span><span class="language-xml">,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null&quot;</span>&gt;</span>email=#</span><span class="hljs-template-variable">&#123;email&#125;</span><span class="language-xml">,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;bio != null&quot;</span>&gt;</span>bio=#</span><span class="hljs-template-variable">&#123;bio&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span></span><br><span class="language-xml">  where id=#</span><span class="hljs-template-variable">&#123;id&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>指路详情篇：<br><a href="http://t.csdn.cn/9alXI">MyBatis详细笔记</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise存档</title>
    <link href="/2022/07/15/Promise/"/>
    <url>/2022/07/15/Promise/</url>
    
    <content type="html"><![CDATA[<h4 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Promise</span></span>&#123;<br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">constructor</span>(executor)&#123;<br>        <span class="hljs-comment">//添加属性</span><br>        <span class="hljs-keyword">this</span>.PromiseState = <span class="hljs-string">&#x27;pending&#x27;</span>;<br>        <span class="hljs-keyword">this</span>.PromiseResult = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//声明属性</span><br>        <span class="hljs-keyword">this</span>.callbacks = [];<br>        <span class="hljs-comment">//保存实例对象的 this 的值</span><br>        <span class="hljs-keyword">const</span> self = <span class="hljs-keyword">this</span>;<span class="hljs-comment">// self _this that</span><br>        <span class="hljs-comment">//resolve 函数</span><br>        function resolve(<span class="hljs-keyword">data</span>)&#123;<br>            <span class="hljs-comment">//判断状态</span><br>            <span class="hljs-keyword">if</span>(self.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">return</span>;<br>            <span class="hljs-comment">//1. 修改对象的状态 (promiseState)</span><br>            self.PromiseState = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<span class="hljs-comment">// resolved</span><br>            <span class="hljs-comment">//2. 设置对象结果值 (promiseResult)</span><br>            self.PromiseResult = <span class="hljs-keyword">data</span>;<br>            <span class="hljs-comment">//调用成功的回调函数</span><br>            setTimeout(() =&gt; &#123;<br>                self.callbacks.forEach(item =&gt; &#123;<br>                    item.onResolved(<span class="hljs-keyword">data</span>);<br>                &#125;);<br>            &#125;);<br>        &#125;<br>        <span class="hljs-comment">//reject 函数</span><br>        function reject(<span class="hljs-keyword">data</span>)&#123;<br>            <span class="hljs-comment">//判断状态</span><br>            <span class="hljs-keyword">if</span>(self.PromiseState !== <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">return</span>;<br>            <span class="hljs-comment">//1. 修改对象的状态 (promiseState)</span><br>            self.PromiseState = <span class="hljs-string">&#x27;rejected&#x27;</span>;<span class="hljs-comment">// </span><br>            <span class="hljs-comment">//2. 设置对象结果值 (promiseResult)</span><br>            self.PromiseResult = <span class="hljs-keyword">data</span>;<br>            <span class="hljs-comment">//执行失败的回调</span><br>            setTimeout(() =&gt; &#123;<br>                self.callbacks.forEach(item =&gt; &#123;<br>                    item.onRejected(<span class="hljs-keyword">data</span>);<br>                &#125;);<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//同步调用『执行器函数』</span><br>            executor(resolve, reject);<br>        &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>            <span class="hljs-comment">//修改 promise 对象状态为『失败』</span><br>            reject(e);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-then方法"><a href="#2-then方法" class="headerlink" title="2.then方法"></a>2.then方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//then 方法封装</span><br><span class="hljs-title function_">then</span>(<span class="hljs-params">onResolved,onRejected</span>)&#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">//判断回调函数参数</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&#x27;function&#x27;</span>)&#123;<br>        onRejected = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">throw</span> reason;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&#x27;function&#x27;</span>)&#123;<br>        onResolved = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value;<br>        <span class="hljs-comment">//value =&gt; &#123; return value&#125;;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <br>        <span class="hljs-comment">//封装函数</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">type</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-comment">//获取回调函数的执行结果</span><br>                <span class="hljs-keyword">let</span> result = <span class="hljs-title function_">type</span>(self.<span class="hljs-property">PromiseResult</span>);<br>                <span class="hljs-comment">//判断</span><br>                <span class="hljs-keyword">if</span>(result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>)&#123;<br>                    <span class="hljs-comment">//如果是 Promise 类型的对象</span><br>                    result.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                        <span class="hljs-title function_">resolve</span>(v);<br>                    &#125;, <span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>&#123;<br>                        <span class="hljs-title function_">reject</span>(r);<br>                    &#125;)<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//结果的对象状态为『成功』</span><br>                    <span class="hljs-title function_">resolve</span>(result);<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>                <span class="hljs-title function_">reject</span>(e);<br>            &#125;<br>        &#125;<br>        <br>        <br>        <span class="hljs-comment">//调用回调函数  PromiseState</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;fulfilled&#x27;</span>)&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-title function_">callback</span>(onResolved);<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;rejected&#x27;</span>)&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-title function_">callback</span>(onRejected);<br>            &#125;);<br>        &#125;<br>        <span class="hljs-comment">//判断 pending 状态</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;pending&#x27;</span>)&#123;<br>            <span class="hljs-comment">//保存回调函数</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">push</span>(&#123;<br>                <span class="hljs-attr">onResolved</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-title function_">callback</span>(onResolved);<br>                &#125;,<br>                <span class="hljs-attr">onRejected</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-title function_">callback</span>(onRejected);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-catch方法"><a href="#3-catch方法" class="headerlink" title="3.catch方法"></a>3.catch方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//catch 方法</span><br><span class="hljs-keyword">catch</span>(onRejected)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.then(undefined, onRejected);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-resolve方法"><a href="#4-resolve方法" class="headerlink" title="4.resolve方法"></a>4.resolve方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//添加 resolve 方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">value</span>)&#123;<br>    <span class="hljs-comment">//返回promise对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>)&#123;<br>            value.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>&#123;<br>                <span class="hljs-title function_">resolve</span>(v);<br>            &#125;, <span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>&#123;<br>                <span class="hljs-title function_">reject</span>(r);<br>            &#125;)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//状态设置为成功</span><br>            <span class="hljs-title function_">resolve</span>(value);<br>        &#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-reject方法"><a href="#5-reject方法" class="headerlink" title="5.reject方法"></a>5.reject方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//添加 reject 方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-title function_">reject</span>(<span class="hljs-params">reason</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reject</span>(reason);<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6-all-方法"><a href="#6-all-方法" class="headerlink" title="6.all 方法"></a>6.all 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//添加 all 方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-title function_">all</span>(<span class="hljs-params">promises</span>)&#123;<br>    <span class="hljs-comment">//返回结果为promise对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//声明变量</span><br>        <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> arr = [];<br>        <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;promises.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-comment">//</span><br>            promises[i].<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                <span class="hljs-comment">//得知对象的状态是成功</span><br>                <span class="hljs-comment">//每个promise对象 都成功</span><br>                count++;<br>                <span class="hljs-comment">//将当前promise对象成功的结果 存入到数组中</span><br>                arr[i] = v;<br>                <span class="hljs-comment">//判断</span><br>                <span class="hljs-keyword">if</span>(count === promises.<span class="hljs-property">length</span>)&#123;<br>                    <span class="hljs-comment">//修改状态</span><br>                    <span class="hljs-title function_">resolve</span>(arr);<br>                &#125;<br>            &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">reject</span>(r);<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="7-race-方法"><a href="#7-race-方法" class="headerlink" title="7.race 方法"></a>7.race 方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    <span class="hljs-comment">//添加 race 方法</span><br>    <span class="hljs-keyword">static</span> race (promises)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;promises.<span class="hljs-property">length</span>;i++)&#123;<br>                promises[i].<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                    <span class="hljs-comment">//修改返回对象的状态为 『成功』</span><br>                    <span class="hljs-title function_">resolve</span>(v);<br>                &#125;,<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>&#123;<br>                    <span class="hljs-comment">//修改返回对象的状态为 『失败』</span><br>                    <span class="hljs-title function_">reject</span>(r);<br>                &#125;)<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-async-与-await"><a href="#8-async-与-await" class="headerlink" title="8.async 与 await"></a>8.async 与 await</h4><p><strong>读取文件并拼接：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * resource  1.html  2.html 3.html 文件内容</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> mineReadFile = util.<span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">readFile</span>);<br><br><span class="hljs-comment">//回调函数的方式</span><br><span class="hljs-comment">// fs.readFile(&#x27;./resource/1.html&#x27;, (err, data1) =&gt; &#123;</span><br><span class="hljs-comment">//     if(err) throw err;</span><br><span class="hljs-comment">//     fs.readFile(&#x27;./resource/2.html&#x27;, (err, data2) =&gt; &#123;</span><br><span class="hljs-comment">//         if(err) throw err;</span><br><span class="hljs-comment">//         fs.readFile(&#x27;./resource/3.html&#x27;, (err, data3) =&gt; &#123;</span><br><span class="hljs-comment">//             if(err) throw err;</span><br><span class="hljs-comment">//             console.log(data1 + data2 + data3);</span><br><span class="hljs-comment">//         &#125;);</span><br><span class="hljs-comment">//     &#125;);</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//async 与 await</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">//读取第一个文件的内容</span><br>        <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">mineReadFile</span>(<span class="hljs-string">&#x27;./resource/1x.html&#x27;</span>);<br>        <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">mineReadFile</span>(<span class="hljs-string">&#x27;./resource/2.html&#x27;</span>);<br>        <span class="hljs-keyword">let</span> data3 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">mineReadFile</span>(<span class="hljs-string">&#x27;./resource/3.html&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1 + data2 + data3);<br>    &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">code</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">main</span>();<br></code></pre></td></tr></table></figure><p><strong>结合发送ajax请求：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//axios</span><br>       <span class="hljs-keyword">function</span> send<span class="hljs-constructor">AJAX(<span class="hljs-params">url</span>)</span>&#123;<br>           return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Promise((<span class="hljs-params">resolve</span>, <span class="hljs-params">reject</span>)</span> =&gt; &#123;<br>               const xhr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XMLHttpRequest()</span>;<br>               xhr.responseType = &#x27;json&#x27;;<br>               xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, url);<br>               xhr.send<span class="hljs-literal">()</span>;<br>               <span class="hljs-comment">//处理结果</span><br>               xhr.onreadystatechange = <span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>                   <span class="hljs-keyword">if</span>(xhr.readyState<span class="hljs-operator"> === </span><span class="hljs-number">4</span>)&#123;<br>                       <span class="hljs-comment">//判断成功</span><br>                       <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span><span class="hljs-operator"> &amp;&amp; </span>xhr.status &lt; <span class="hljs-number">300</span>)&#123;<br>                           <span class="hljs-comment">//成功的结果</span><br>                           resolve(xhr.response);<br>                       &#125;<span class="hljs-keyword">else</span>&#123;<br>                           reject(xhr.status);<br>                       &#125;<br>                   &#125;<br>               &#125;<br>           &#125;);<br>       &#125;<br><br>       <span class="hljs-comment">//段子接口地址 https://api.apiopen.top/getJoke</span><br>       <span class="hljs-keyword">let</span> btn = document.query<span class="hljs-constructor">Selector(&#x27;#<span class="hljs-params">btn</span>&#x27;)</span>;<br><br>       btn.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">click</span>&#x27;,<span class="hljs-params">async</span> <span class="hljs-params">function</span>()</span>&#123;<br>           <span class="hljs-comment">//获取段子信息</span><br>           <span class="hljs-keyword">let</span> duanzi = await send<span class="hljs-constructor">AJAX(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">api</span>.<span class="hljs-params">apiopen</span>.<span class="hljs-params">top</span><span class="hljs-operator">/</span><span class="hljs-params">getJoke</span>&#x27;)</span>;<br>           console.log(duanzi);<br>       &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Promise手写</tag>
      
      <tag>async</tag>
      
      <tag>await</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebPack存档</title>
    <link href="/2022/07/15/webpack/"/>
    <url>/2022/07/15/webpack/</url>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="1-两种开发模式"><a href="#1-两种开发模式" class="headerlink" title="1.两种开发模式"></a>1.两种开发模式</h4><p>开发模式：代码能编译自动化运行<br>生产模式：代码编译优化输出</p><h4 id="1-Webpack-基本功能"><a href="#1-Webpack-基本功能" class="headerlink" title="1.Webpack 基本功能"></a>1.Webpack 基本功能</h4><p>开发模式：可以编译 ES Module 语法<br>生产模式：可以编译 ES Module 语法，压缩 js 代码</p><h4 id="1-Webpack-配置文件"><a href="#1-Webpack-配置文件" class="headerlink" title="1.Webpack 配置文件"></a>1.Webpack 配置文件</h4><h6 id="5-个核心概念"><a href="#5-个核心概念" class="headerlink" title="5 个核心概念"></a>5 个核心概念</h6><ul><li>entry</li><li>output</li><li>loader</li><li>plugins</li><li>mode</li></ul><h6 id="devServer-配置"><a href="#devServer-配置" class="headerlink" title="devServer 配置"></a>devServer 配置</h6><ul><li>Webpack 脚本指令用法</li><li>webpack 直接打包输出</li><li>webpack serve 启动开发服务器，内存编译打包没有输出</li></ul><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><h4 id="1-提升开发体验"><a href="#1-提升开发体验" class="headerlink" title="1.提升开发体验"></a>1.提升开发体验</h4><p>使用 <code>Source Map</code> 让开发或上线时代码报错能有更加准确的错误提示。</p><h4 id="2-提升-webpack-提升打包构建速度"><a href="#2-提升-webpack-提升打包构建速度" class="headerlink" title="2.提升 webpack 提升打包构建速度"></a>2.提升 webpack 提升打包构建速度</h4><ul><li><p>使用 <code>HotModuleReplacement</code> 让开发时只重新编译打包更新变化了的代码，不变的代码使用缓存，从而使更新速度更快。</p></li><li><p>使用 <code>OneOf</code> 让资源文件一旦被某个 loader 处理了，就不会继续遍历了，打包速度更快。</p></li><li><p>使用 <code>Include/Exclude</code> 排除或只检测某些文件，处理的文件更少，速度更快。</p></li><li><p>使用 <code>Cache</code> 对 <code>eslint 和 babel</code> 处理的结果进行缓存，让第二次打包速度更快。</p></li><li><p>使用 <code>Thead</code> 多进程处理 <code>eslint 和 babel</code> 任务，速度更快。（需要注意的是，进程启动通信都有开销的，要在比较多代码处理时使用才有效果）</p></li></ul><h4 id="3-减少代码体积"><a href="#3-减少代码体积" class="headerlink" title="3.减少代码体积"></a>3.减少代码体积</h4><ul><li><p>使用 <code>Tree Shaking</code> 剔除了没有使用的多余代码，让代码体积更小。</p></li><li><p>使用 <code>@babel/plugin-transform-runtime</code> 插件对 <code>babel</code> 进行处理，让辅助代码从中引入，而不是每个文件都生成辅助代码，从而体积更小。</p></li><li><p>使用 <code>Image Minimizer</code> 对项目中图片进行压缩，体积更小，请求速度更快。（需要注意的是，如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。）</p></li></ul><h4 id="4-优化代码运行性能"><a href="#4-优化代码运行性能" class="headerlink" title="4.优化代码运行性能"></a>4.优化代码运行性能</h4><ul><li><p>使用 <code>Code Split</code> 对代码进行分割成多个 js 文件，从而使单个文件体积更小，并行加载 js 速度更快。并通过 <code>import</code> 动态导入语法进行按需加载，从而达到需要使用时才加载该资源，不用时不加载资源。</p></li><li><p>使用 <code>Preload / Prefetch</code> 对代码进行提前加载，等未来需要使用时就能直接使用，从而用户体验更好。</p></li><li><p>使用<code> Network Cache</code> 能对输出资源文件进行更好的命名，将来好做缓存，从而用户体验更好。</p></li><li><p>使用 <code>Core-js</code> 对 js 进行兼容性处理，让我们代码能运行在低版本浏览器。</p></li><li><p>使用 <code>PWA</code> 能让代码离线也能访问，从而提升用户体验。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>WebPack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack打包</tag>
      
      <tag>打包优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 细节存档</title>
    <link href="/2022/07/07/JavaScript/"/>
    <url>/2022/07/07/JavaScript/</url>
    
    <content type="html"><![CDATA[<p>感觉JavaScript里面还有很多基础的细节没搞明白，开个坑专门存一下。</p><h3 id="转义特殊字符"><a href="#转义特殊字符" class="headerlink" title="转义特殊字符"></a>转义特殊字符</h3><p>如果要匹配的 ID 或选择器不符合 CSS 语法（比如不恰当地使用了冒号或者空格），你必须用反斜杠将这些字符转义。由于 JavaScript 中，反斜杠是转义字符，所以当你输入一个文本串时，你必须将它转义两次（一次是为 JavaScript 字符串转义，另一次是为 querySelector 转义）：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo\bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;foo:bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;#foo\bar&#x27;</span>)               <span class="hljs-comment">// &quot;#fooar&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#foo\bar&#x27;</span>)    <span class="hljs-comment">// 不匹配任何元素</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;#foo\\bar&#x27;</span>)              <span class="hljs-comment">// &quot;#foo\bar&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;#foo\\\\bar&#x27;</span>)            <span class="hljs-comment">// &quot;#foo\\bar&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#foo\\\\bar&#x27;</span>) <span class="hljs-comment">// 匹配第一个 div</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#foo:bar&#x27;</span>)    <span class="hljs-comment">// 不匹配任何元素</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#foo\\:bar&#x27;</span>)  <span class="hljs-comment">// 匹配第二个 div</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>//补充<span class="hljs-built_in">：document</span>.querySelector选择器特殊使用<br>/*<br>这里，一个 class 属性为<span class="hljs-string">&quot;user-panel main&quot;</span>的 div 元素<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>(</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user-panel main&quot;</span>&gt;</span>) </span><br><span class="language-xml">内包含一个 name 属性为&quot;login&quot;的 input 元素</span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span>&gt;</span> (<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span>/&gt;</span>) </span><br><span class="language-xml">如何选择，如下所示：</span><br><span class="language-xml">*/</span><br><span class="language-xml">var el = document.querySelector(&quot;div.user-panel.main input[name=&#x27;login&#x27;]&quot;);</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>转义字符</th><th>译义</th></tr></thead><tbody><tr><td>\ ?</td><td>在书写连续多个问好时使用，防止他们被解析成三字母词</td></tr><tr><td>\ ’</td><td>用于表示字符常量‘</td></tr><tr><td>\ “</td><td>用于表示字符常量”</td></tr><tr><td>\ \</td><td>用于表示一个反斜杠，防止他被解译成一个转义字符</td></tr><tr><td>\ a</td><td>警告字符，表示：蜂鸣</td></tr><tr><td>\ b</td><td>退格符</td></tr><tr><td>\ f</td><td>换页符</td></tr><tr><td>\ n</td><td>换行符</td></tr><tr><td>\ r</td><td>回车符</td></tr><tr><td>\ t</td><td>水平制表符</td></tr><tr><td>\ v</td><td>垂直制表符</td></tr><tr><td>\ ddd</td><td>三位八进制数代表一个ASCII字符（ddd是一个八进制数字）</td></tr><tr><td>\ xdd</td><td>二为十六进制数代表一个ASCII字符（dd是一个十六进制数字）</td></tr></tbody></table><h3 id="var、let、const异同"><a href="#var、let、const异同" class="headerlink" title="var、let、const异同"></a>var、let、const异同</h3><h5 id="1）作用域"><a href="#1）作用域" class="headerlink" title="1）作用域"></a>1）作用域</h5><p>用 var 声明的变量的作用域是它当前的执行上下文，即如果是在任何函数外面，则是全局执行上下文，如果在函数里面，则是当前函数执行上下文。换句话说，var 声明的变量的作用域只能是全局或者整个函数块的。</p><p>而 let 声明的变量的作用域则是它当前所处代码块，即它的作用域既可以是全局或者整个函数块，也可以是 if、while、switch等用{}限定的代码块。</p><p>另外，var 和 let 的作用域规则都是一样的，其声明的变量只在其声明的块或子块中可用。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">varTest</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><br>  &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>; <span class="hljs-comment">// 函数块中，同一个变量</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 2</span><br>  &#125;<br>  <br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 2</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">letTest</span>(<span class="hljs-params"></span>) &#123;<br>  let a = <span class="hljs-number">1</span>;<br><br>  &#123;<br>    let a = <span class="hljs-number">2</span>; <span class="hljs-comment">// 代码块中，新的变量</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 2</span><br>  &#125;<br>  <br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>let 声明的作用域比 var 声明的作用域有更小的限定范围，更具灵活。</p><h5 id="2）重复性"><a href="#2）重复性" class="headerlink" title="2）重复性"></a>2）重复性</h5><p>var 允许在同一作用域中重复声明，而 let 不允许，否则将抛出异常。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var a <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>var a <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br><br>console.log(a) // <span class="hljs-number">2</span><br><br> let a <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br> let a <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">; // SyntaxError: Identifier &#x27;a&#x27; has already been declared</span><br></code></pre></td></tr></table></figure><h5 id="3）绑定全局对象"><a href="#3）绑定全局对象" class="headerlink" title="3）绑定全局对象"></a>3）绑定全局对象</h5><p>var 在全局环境声明变量，会在全局对象里新建一个属性，而 let 在全局环境声明变量，则不会在全局对象里新建一个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;global&#x27;</span><br><span class="hljs-keyword">let</span> bar = <span class="hljs-string">&#x27;global&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>) <span class="hljs-comment">// global</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bar</span>) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><ul><li>let 在全局环境声明变量 bar 保存在  [[Scopes]][0]: Script  这个变量的属性中；</li><li>而  [[Scopes]][1]: Global  就是我们常说的全局对象。</li></ul><h5 id="4）变量提升与暂存死区"><a href="#4）变量提升与暂存死区" class="headerlink" title="4）变量提升与暂存死区"></a>4）变量提升与暂存死区</h5><ol><li>var 声明的变量在执行上下文创建阶段就会被「创建」和「初始化」，因此对于执行阶段来说，可以在声明之前使用。</li><li>let 声明的变量在执行上下文创建阶段只会被「创建」而不会被「初始化」，因此对于执行阶段来说，如果在其定义执行前使用，相当于使用了未被初始化的变量，会报错。</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//示例代码 1：</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(bar); <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(foo); <span class="hljs-comment">// ReferenceError: foo is not defined</span><br><br><span class="hljs-keyword">var</span> bar = <span class="hljs-number">1</span>;<br>let foo = <span class="hljs-number">2</span>;<br><br><br><span class="hljs-comment">//示例代码 2：</span><br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-number">33</span>;<br>&#123;<br>  let foo = (foo + <span class="hljs-number">55</span>); <span class="hljs-comment">// ReferenceError: foo is not defined</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5）const变量"><a href="#5）const变量" class="headerlink" title="5）const变量"></a>5）const变量</h5><p>const 与 let 很类似，都具有上面提到的 let 的特性，唯一区别就在于 const 声明的是一个只读变量，声明之后不允许改变其值。因此，const 一旦声明必须初始化，否则会报错。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> a;<br><span class="hljs-keyword">const</span> b = <span class="hljs-string">&quot;constant&quot;</span><br><br>a = <span class="hljs-string">&quot;variable&quot;</span><br>b = <span class="hljs-string">&#x27;change&#x27;</span> <span class="hljs-comment">// TypeError: Assignment to constant variable</span><br></code></pre></td></tr></table></figure><p><strong>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 此处可调用 carName 变量<br><span class="hljs-regexp">//</span>此处可使用 window.carName<br> <br><span class="hljs-keyword">function</span> myFunction() &#123;<br>    carName = <span class="hljs-string">&quot;Volvo&quot;</span>;<br>    <span class="hljs-regexp">//</span> 此处可调用 carName 变量<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>JavaScript 变量生命周期在它声明时初始化。</p></li><li><p>局部变量在函数执行完毕后销毁。</p></li><li><p>全局变量在页面关闭后销毁。</p></li></ul><ol><li><p>使用var关键字声明的全局作用域变量属于window对象。</p></li><li><p>使用let关键字声明的全局作用域变量不属于window对象。</p></li><li><p>使用var关键字声明的变量在任何地方都可以修改。</p></li><li><p>在相同的作用域或块级作用域中，不能使用let关键字来重置var关键字声明的变量。</p></li><li><p>在相同的作用域或块级作用域中，不能使用let关键字来重置let关键字声明的变量。</p></li><li><p>let关键字在不同作用域，或不用块级作用域中是可以重新声明赋值的。</p></li><li><p>在相同的作用域或块级作用域中，不能使用const关键字来重置var和let关键字声明的变量。</p></li><li><p>在相同的作用域或块级作用域中，不能使用const关键字来重置const关键字声明的变量</p></li><li><p>const 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的:</p></li><li><p>var关键字定义的变量可以先使用后声明。</p></li><li><p>let关键字定义的变量需要先声明再使用。</p></li><li><p>const关键字定义的常量，声明时必须进行初始化，且初始化后不可再修改</p></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h5 id="1-使用-constructor-属性来查看对象"><a href="#1-使用-constructor-属性来查看对象" class="headerlink" title="1.使用 constructor 属性来查看对象"></a>1.使用 constructor 属性来查看对象</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//判断是否为数组</span><br><span class="hljs-keyword">function</span> is<span class="hljs-constructor">Array(<span class="hljs-params">myArray</span>)</span> &#123;<br>    return myArray.constructor.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.index<span class="hljs-constructor">Of(<span class="hljs-string">&quot;Array&quot;</span>)</span> &gt; -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//判断是否为日期对象</span><br><span class="hljs-keyword">function</span> is<span class="hljs-constructor">Date(<span class="hljs-params">myDate</span>)</span> &#123;<br>    return myDate.constructor.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.index<span class="hljs-constructor">Of(<span class="hljs-string">&quot;Date&quot;</span>)</span> &gt; -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-类型转换的多种方法"><a href="#2-类型转换的多种方法" class="headerlink" title="2.类型转换的多种方法"></a>2.类型转换的多种方法</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>转化为字符    x可为数字、布尔值、日期<br><br>String(x)<br>x.toString()   <span class="hljs-regexp">//</span>甚至可以转换函数<span class="hljs-keyword">function</span> 结果为整个函数体（ <span class="hljs-keyword">function</span> myFunction(a, b) &#123;...&#125; ）<br><br><span class="hljs-regexp">//</span>转化为数字<br>/*全局方法 Number() 可以将字符串转换为数字。<br>字符串包含数字(如 <span class="hljs-string">&quot;3.14&quot;</span>) 转换为数字 (如 <span class="hljs-number">3.14</span>).<br>空字符串转换为 <span class="hljs-number">0</span>。<br>其他的字符串会转换为 NaN (不是个数字)。*/<br><br>Number(x)       <span class="hljs-regexp">//</span>x可为布尔值、日期、字符；无效字符会转换成NaN<br>parseFloat()<span class="hljs-regexp">//</span>解析一个字符串，并返回一个浮点数。<br>parseInt()    <span class="hljs-regexp">//</span>解析一个字符串，并返回一个整数。<br><br><br><br><span class="hljs-regexp">//</span>自动转换类型<br><br><span class="hljs-number">5</span> + null    <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">5</span>         null 转换为 <span class="hljs-number">0</span><br><span class="hljs-string">&quot;5&quot;</span> + null  <span class="hljs-regexp">//</span> 返回<span class="hljs-string">&quot;5null&quot;</span>   null 转换为 <span class="hljs-string">&quot;null&quot;</span><br><span class="hljs-string">&quot;5&quot;</span> + <span class="hljs-number">1</span>     <span class="hljs-regexp">//</span> 返回 <span class="hljs-string">&quot;51&quot;</span>      <span class="hljs-number">1</span> 转换为 <span class="hljs-string">&quot;1&quot;</span> <br><span class="hljs-string">&quot;5&quot;</span> - <span class="hljs-number">1</span>     <span class="hljs-regexp">//</span> 返回 <span class="hljs-number">4</span>         <span class="hljs-string">&quot;5&quot;</span> 转换为 <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><code>var patt = /runoob/i</code></p><p>实例解析：</p><ul><li><p>&#x2F;runoob&#x2F;i  是一个正则表达式。</p></li><li><p>runoob  是一个正则表达式主体 (用于检索)。</p></li><li><p>i  是一个修饰符 (搜索不区分大小写)。（g-执行全局匹配（查找所有匹配）,m-执行多行匹配）</p></li></ul><h5 id="1-使用字符串方法"><a href="#1-使用字符串方法" class="headerlink" title="1.使用字符串方法"></a>1.使用字符串方法</h5><ol><li><p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p></li><li><p>replace() 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。</p></li><li><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p></li><li><p>exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p></li></ol><h5 id="2-正则表达式规则"><a href="#2-正则表达式规则" class="headerlink" title="2.正则表达式规则"></a>2.正则表达式规则</h5><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符。</td></tr><tr><td>[0-9]</td><td>查找任何从 0 至 9 的数字。</td></tr><tr><td>(x</td><td>y)</td></tr></tbody></table><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>\d</td><td>查找数字。</td></tr><tr><td>\s</td><td>查找空白字符。</td></tr><tr><td>\b</td><td>匹配单词边界。</td></tr><tr><td>\uxxxx</td><td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配任何包含至少一个 n 的字符串。</td></tr><tr><td>n*</td><td>匹配任何包含零个或多个 n 的字符串。</td></tr><tr><td>n？</td><td>匹配任何包含零个或一个 n 的字符串。</td></tr></tbody></table><h3 id="使用误区"><a href="#使用误区" class="headerlink" title="使用误区"></a>使用误区</h3><h5 id="1-比较"><a href="#1-比较" class="headerlink" title="1.比较"></a>1.比较</h5><p>在常规的比较中，数据类型是被忽略的，以下 if 条件语句返回 true：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var x <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>var y <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10&quot;</span><span class="hljs-comment">;</span><br>if (x <span class="hljs-operator">=</span><span class="hljs-operator">=</span> y)<br></code></pre></td></tr></table></figure><p>在严格的比较运算中，&#x3D;&#x3D;&#x3D; 为恒等计算符，同时检查表达式的值与类型，以下 if 条件语句返回 false：（switch 语句会使用&#x3D;&#x3D;恒等计算符(&#x3D;&#x3D;&#x3D;)&#x3D;&#x3D;进行比较:）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var x <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>var y <span class="hljs-operator">=</span> <span class="hljs-string">&quot;10&quot;</span><span class="hljs-comment">;</span><br>if (x <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> y)<br></code></pre></td></tr></table></figure><h5 id="2-浮点数"><a href="#2-浮点数" class="headerlink" title="2.浮点数"></a>2.浮点数</h5><p>JavaScript 中的所有数据都是以 64 位浮点型数据(float) 来存储。</p><p>所有的编程语言，包括 JavaScript，对浮点型数据的精确度都很难确定：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">0.1</span>;<br><span class="hljs-keyword">var</span> y = <span class="hljs-number">0.2</span>;<br><span class="hljs-keyword">var</span> z = x + y            <span class="hljs-comment">// z 的结果为 0.30000000000000004</span><br><span class="hljs-keyword">if</span> (z == <span class="hljs-number">0.3</span>)            <span class="hljs-comment">// 返回 false</span><br><br><span class="hljs-comment">//为解决以上问题，可以用整数的乘除法来解决：</span><br><br><span class="hljs-keyword">var</span> z = (x * <span class="hljs-number">10</span> + y * <span class="hljs-number">10</span>) / <span class="hljs-number">10</span>;     <span class="hljs-comment">// z的结果为 0.3</span><br></code></pre></td></tr></table></figure><h5 id="3-JSON-与-JS-对象"><a href="#3-JSON-与-JS-对象" class="headerlink" title="3.JSON 与 JS 对象"></a>3.JSON 与 JS 对象</h5><p>JSON 是 JS 对象的字符串表示法。它使用文本表示一个 JS 对象的信息，（JSON）本质是一个字符串。如：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scilab">var obj = &#123;a: <span class="hljs-string">&#x27;Hello&#x27;</span>, b: <span class="hljs-string">&#x27;World&#x27;</span>&#125;; <span class="hljs-comment">//这是一个js对象，注意js对象的键名也是可以使用引号包裹的,这里的键名就不用引号包含</span><br>var json = <span class="hljs-string">&#x27;&#123;&quot;</span>a<span class="hljs-string">&quot;: &quot;</span>Hello<span class="hljs-string">&quot;, &quot;</span>b<span class="hljs-string">&quot;: &quot;</span>World<span class="hljs-string">&quot;&#125;&#x27;</span>; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></td></tr></table></figure><p>JSON（格式字符串）和JS对象互转（JSON.parse和 JSON.stringify）。</p><p>使用 JSON.parse() 方法从JSON字符串转换为JS对象：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">var obj = JSON.parse(&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;World&quot;</span>&#125;&#x27;); //结果是 &#123;a: <span class="hljs-symbol">&#x27;Hello</span>&#x27;, b: <span class="hljs-symbol">&#x27;World</span>&#x27;&#125;  一个对象<br>要实现从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：<br><br>var json = JSON.stringify(&#123;a: <span class="hljs-symbol">&#x27;Hello</span>&#x27;, b: <span class="hljs-symbol">&#x27;World</span>&#x27;&#125;); //结果是 &#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;World&quot;</span>&#125;&#x27;  一个JSON格式的字符串<br></code></pre></td></tr></table></figure><p>JSON.parse() 就是字符串转 js 对象， JSON.stringify()就是 js 对象转字符串，<br><strong>它们前提是要 json 格式才有意义。</strong></p><h3 id="JavaScript-Promise"><a href="#JavaScript-Promise" class="headerlink" title="JavaScript Promise"></a>JavaScript Promise</h3><h5 id="1-构造-Promise"><a href="#1-构造-Promise" class="headerlink" title="1.构造 Promise"></a>1.构造 Promise</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span> <span class="hljs-constructor">Promise(<span class="hljs-params">function</span> (<span class="hljs-params">resolve</span>, <span class="hljs-params">reject</span>)</span> &#123;<br>    <span class="hljs-comment">// 要做的事情...</span><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="2-使用resolve-和-reject"><a href="#2-使用resolve-和-reject" class="headerlink" title="2.使用resolve 和 reject"></a>2.使用resolve 和 reject</h5><p>resolve 和 reject 都是函数，其中调用 resolve 代表一切正常，reject 是出现异常时所调用的：</p><ul><li>resolve 和 reject 的作用域只有起始函数，不包括 then 以及其他序列；</li><li>resolve 和 reject 并不能够使起始函数停止运行，别忘了 return。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">new</span> Promise(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) reject(<span class="hljs-string">&quot;Divide zero&quot;</span>);<br>    <span class="hljs-keyword">else</span> resolve(a / b);<br>&#125;).then(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;a / b = &quot;</span> + value);<br>&#125;).catch(<span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(err);<br>&#125;).finally(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;End&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这段程序执行结果是:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">a / b <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>End<br></code></pre></td></tr></table></figure><p>Promise 类有 .then() .catch() 和 .finally() 三个方法，这三个方法的参数都是一个函数，.then() 可以将参数中的函数添加到当前 Promise 的正常执行序列，.catch() 则是设定 Promise 的异常处理序列，.finally() 是在 Promise 执行的最后一定会执行的序列。 .then() 传入的函数会按顺序依次执行，有任何异常都会直接跳到 catch 序列：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">new</span> Promise(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1111</span>);<br>    resolve(<span class="hljs-number">2222</span>);<br>&#125;).then(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3333</span>;<br>&#125;).then(<span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(value);<br>    throw <span class="hljs-string">&quot;An error&quot;</span>;<br>&#125;).catch(<span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(err);<br>&#125;);<br></code></pre></td></tr></table></figure><p>这段程序执行结果是:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">1111</span><br><span class="hljs-number">2222</span><br><span class="hljs-number">3333</span><br><span class="hljs-string">An</span> <span class="hljs-string">error</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h3><h4 id="1-函数参数"><a href="#1-函数参数" class="headerlink" title="1.函数参数"></a>1.函数参数</h4><p><strong>ES6自带参数</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> my<span class="hljs-constructor">Function(<span class="hljs-params">x</span>, <span class="hljs-params">y</span> = 10)</span> &#123;<br>    <span class="hljs-comment">// y is 10 if not passed or undefined</span><br>    return x + y;<br>&#125;<br> <br>my<span class="hljs-constructor">Function(0, 2)</span> <span class="hljs-comment">// 输出 2</span><br>my<span class="hljs-constructor">Function(5)</span>; <span class="hljs-comment">// 输出 15, y 参数的默认值</span><br></code></pre></td></tr></table></figure><p><strong>arguments对象</strong></p><p>JavaScript 函数有个内置的对象 arguments 对象。<br>argument 对象包含了函数调用的参数数组，常称为隐式参数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">x = sumAll(<span class="hljs-number">1</span>, <span class="hljs-number">123</span>, <span class="hljs-number">500</span>, <span class="hljs-number">115</span>, <span class="hljs-number">44</span>, <span class="hljs-number">88</span>);<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sumAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> i, <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; arguments.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-built_in">sum</span> += arguments[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2.函数调用"></a>2.函数调用</h4><p>在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。</p><p>myFunction() 和 window.myFunction() 是一样的：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">function myFunctio<span class="hljs-meta">n</span>(a, b) &#123;<br>    <span class="hljs-keyword">return</span> a <span class="hljs-comment">* b;</span><br>&#125;<br><br>myFunctio<span class="hljs-meta">n</span>(10, 2);           // myFunctio<span class="hljs-meta">n</span>(10, 2) 返回 20<br><span class="hljs-keyword">window</span>.myFunctio<span class="hljs-meta">n</span>(10, 2);    // <span class="hljs-keyword">window</span>.myFunctio<span class="hljs-meta">n</span>(10, 2) 返回 20<br><br></code></pre></td></tr></table></figure><p><strong>全局对象</strong></p><ul><li>当函数没有被自身的对象调用时 this 的值就会变成全局对象。</li><li>在 web 浏览器中全局对象是浏览器窗口（window 对象）。</li><li>该实例返回 this 的值是 window 对象:</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;<br>myFunction();                <span class="hljs-comment">// 返回 window 对象</span><br><br><span class="hljs-comment">//对比对象种的this</span><br><span class="hljs-keyword">var</span> myObject = &#123;<br>    firstName:<span class="hljs-string">&quot;John&quot;</span>,<br>    lastName: <span class="hljs-string">&quot;Doe&quot;</span>,<br>    fullName: <span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;<br>myObject.fullName();          <span class="hljs-comment">// 返回 [object Object] (所有者对象)</span><br></code></pre></td></tr></table></figure><p><strong>作为函数方法调用函数</strong><br>call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> my<span class="hljs-constructor">Function(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>)</span> &#123;<br>    return a<span class="hljs-operator"> * </span>b;<br>&#125;<br>myObject = myFunction.call(myObject, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>);     <span class="hljs-comment">// 返回 20</span><br><br>myArray = <span class="hljs-literal">[<span class="hljs-number">10</span>, <span class="hljs-number">2</span>]</span>;<br>myObject = myFunction.apply(myObject, myArray);  <span class="hljs-comment">// 返回 20</span><br></code></pre></td></tr></table></figure><p>两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。</p><ul><li><p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。</p></li><li><p>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。</p></li></ul><h4 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3.闭包"></a>3.闭包</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">function <span class="hljs-title">add</span>()</span> &#123;<br>    <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> counter += <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-keyword">add</span>();<br><span class="hljs-keyword">add</span>();<br><span class="hljs-keyword">add</span>();<br> <br><span class="hljs-comment">// 本意是想输出 3, 但事与愿违，输出的都是 1 !</span><br></code></pre></td></tr></table></figure><p>比较于：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> add = (<span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> counter += <span class="hljs-number">1</span>;&#125;<br>&#125;)();<br> <br>add();<br>add();<br>add();<br> <br><span class="hljs-comment">// 计数器为 3</span><br></code></pre></td></tr></table></figure><ul><li>变量 add 指定了函数自我调用的返回字值。</li><li>自我调用函数<strong>只执行一次</strong>。设置计数器为 0。并返回函数表达式。</li><li>add变量可以作为一个函数使用。非常棒的部分是它<strong>可以访问函数上一层作用域的计数器</strong>。</li><li>这个叫作 JavaScript 闭包。它使得函数拥有<strong>私有变量</strong>变成可能。</li><li>计数器受匿名函数的作用域保护，<strong>只能通过 add 方法修改</strong>。</li></ul><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h5 id="1-HTMLCollection"><a href="#1-HTMLCollection" class="headerlink" title="1.HTMLCollection"></a>1.HTMLCollection</h5><p><strong>getElementsByTagName</strong> 和 <strong>getElementsByClassName</strong> 这两个方法查找多个 dom 元素，返回的是 htmlcollection 类型，是伪数组而不是真数组，故不能使用数组的方法。</p><p>我们可以使用数组原型配合 slice 方法，利用 call，apply，bind 方法将伪数组转为真数组。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> x=document.getElementById(<span class="hljs-string">&quot;main&quot;</span>);<br><span class="hljs-keyword">var</span> y=x.getElementsByTagName(<span class="hljs-string">&quot;p&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(y)<span class="hljs-comment">//在控制台我们可以看到原型proto为htmlcollection，是伪数组</span><br><span class="hljs-comment">//伪数组转为真数组方法1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">slice</span>.call(y))<span class="hljs-comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span><br><br><span class="hljs-comment">//伪数组转为真数组方法2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">slice</span>.apply(y))<span class="hljs-comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span><br><br><span class="hljs-comment">//伪数组转为真数组方法3</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">slice</span>.bind(y)())<span class="hljs-comment">//在控制台我们可以看到原型proto为Array(0)，是真数组</span><br></code></pre></td></tr></table></figure><h5 id="2-NodeList"><a href="#2-NodeList" class="headerlink" title="2.NodeList"></a>2.NodeList</h5><p>集合 length 属性常用于遍历集合中的元素。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//修改所有 &lt;p&gt; 元素的背景颜色:</span><br><span class="hljs-keyword">var</span> myCollection = document.getElementsByTagName(<span class="hljs-string">&quot;p&quot;</span>);<br><span class="hljs-keyword">var</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; myCollection.<span class="hljs-built_in">length</span>; i++) &#123;<br>    myCollection[i].style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而大部分浏览器的 <strong>querySelectorAll()</strong> 返回 NodeList 对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//修改节点列表中所有 &lt;p&gt; 元素的背景颜色:</span><br><span class="hljs-keyword">var</span> myNodelist = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&quot;p&quot;</span>);<br><span class="hljs-keyword">var</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; myNodelist.length; i++) &#123;<br>    myNodelist[i].style.backgroundColor = <span class="hljs-string">&quot;red&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>HTMLCollection 与 NodeList 的区别</strong></p><table><thead><tr><th>HTMLCollection</th><th>NodeList</th></tr></thead><tbody><tr><td>HTML 元素的集合</td><td>一个文档节点的集合</td></tr><tr><td>可以通过 name，id 或索引来获取</td><td>只能通过索引来获取</td></tr><tr><td>&#x2F;</td><td>只有 NodeList 对象有包含属性节点和文本节点。</td></tr></tbody></table><h3 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h3><h5 id="1-JavaScript-prototype（原型对象）"><a href="#1-JavaScript-prototype（原型对象）" class="headerlink" title="1.JavaScript prototype（原型对象）"></a>1.JavaScript prototype（原型对象）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">first, last, age, eyecolor</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = first;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = last;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">eyeColor</span> = eyecolor;<br>&#125;<br> <br><span class="hljs-keyword">var</span> myFather = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&quot;blue&quot;</span>);<br><span class="hljs-title class_">Person</span>.<span class="hljs-property">nationality</span> = <span class="hljs-string">&quot;English&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myFather.<span class="hljs-property">nationality</span>) <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>对比于：使用prototype 属性（可添加属性及方法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">first, last, age, eyecolor</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = first;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = last;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">eyeColor</span> = eyecolor;<br>&#125;<br> <br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">nationality</span> = <span class="hljs-string">&quot;English&quot;</span>;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myFather.<span class="hljs-property">nationality</span>) <span class="hljs-comment">//English</span><br></code></pre></td></tr></table></figure><h5 id="2-Window"><a href="#2-Window" class="headerlink" title="2.Window"></a>2.Window</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&lt;script&gt;<br>txt = <span class="hljs-string">&quot;&lt;p&gt;浏览器代号: &quot;</span> + navigator.appCodeName + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>txt+= <span class="hljs-string">&quot;&lt;p&gt;浏览器名称: &quot;</span> + navigator.appName + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>txt+= <span class="hljs-string">&quot;&lt;p&gt;浏览器版本: &quot;</span> + navigator.appVersion + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>txt+= <span class="hljs-string">&quot;&lt;p&gt;启用Cookies: &quot;</span> + navigator.cookieEnabled + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>txt+= <span class="hljs-string">&quot;&lt;p&gt;硬件平台: &quot;</span> + navigator.platform + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>txt+= <span class="hljs-string">&quot;&lt;p&gt;用户代理: &quot;</span> + navigator.userAgent + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>txt+= <span class="hljs-string">&quot;&lt;p&gt;用户代理语言: &quot;</span> + navigator.language + <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>document.getElementById<span class="hljs-params">(&quot;example&quot;)</span><span class="hljs-string">.innerHTML=txt</span>;<br>&lt;<span class="hljs-string">/script</span>&gt;<br><br><br>window.<span class="hljs-keyword">history</span>.back<span class="hljs-params">()</span><span class="hljs-string">//</span>返回上一页<br>window.<span class="hljs-keyword">history</span>.forward<span class="hljs-params">()</span><span class="hljs-string">//</span>前往下一页<br>window.<span class="hljs-keyword">history</span>.go<span class="hljs-params">(1)</span>;  <span class="hljs-string">//</span> go<span class="hljs-params">()</span> 里面的参数表示跳转页面的个数 例如 <span class="hljs-keyword">history</span>.go<span class="hljs-params">(1)</span> 表示前进<br>window.<span class="hljs-keyword">history</span>.go<span class="hljs-params">(-1)</span>;  <span class="hljs-string">//</span> go<span class="hljs-params">()</span> 里面的参数表示跳转页面的个数 例如 <span class="hljs-keyword">history</span>.go<span class="hljs-params">(-1)</span> 表示后退一个页面<br>window.<span class="hljs-keyword">history</span>.go<span class="hljs-params">(0)</span>;  <span class="hljs-string">//</span> go<span class="hljs-params">()</span> 里面的参数为0,表示刷新页面<br></code></pre></td></tr></table></figure><p><strong>ES6-ES11指路：<a href="https://blog.csdn.net/lyyrhf/article/details/115338763">https://blog.csdn.net/lyyrhf/article/details/115338763</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6</tag>
      
      <tag>正则</tag>
      
      <tag>使用误区整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookie,Web Storage,VueX存档</title>
    <link href="/2022/07/06/VueX/"/>
    <url>/2022/07/06/VueX/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1. Cookie"></a>1. Cookie</h3><p>客户端浏览器存储数据都是通过cookie来实现的。cookie因其自身的特性，在一些方面有其独有的优势，比如可配置过期时间、可跨域共享（具有相同祖先域名时）、与服务器数据交互等，但在做数据存储方面，其缺点显而易见：</p><ul><li>客户端发送请求时，cookie会作为头部将无用数据一起发送给服务器</li><li>请求被拦截后，cookie数据有泄漏和被篡改的安全风险</li><li>cookie存储数据的大小被限制在4K。IE8、Firefox、opera每个域对cookie的数量也有限制，上限是50，Safari&#x2F;WebKit没有限制。</li></ul><p>以下是获取和设置cookie的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 根据name获取cookie</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">let</span> c_start = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">indexOf</span>(name + <span class="hljs-string">&quot;=&quot;</span>);<br>    <span class="hljs-keyword">if</span> (c_start != -<span class="hljs-number">1</span>) &#123;<br>      c_start = c_start + name.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">let</span> c_end = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;;&quot;</span>, c_start);<br>      <span class="hljs-keyword">if</span> (c_end == -<span class="hljs-number">1</span>) c_end = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-property">length</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">substring</span>(c_start, c_end));<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><span class="hljs-comment">// 设置cookie，name/value为名和值，params为参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setCookie</span>(<span class="hljs-params">name, value, params = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; expires, ...args &#125; = params;<br>  <span class="hljs-keyword">if</span> (expires) &#123;<br>    <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    expires = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(date.<span class="hljs-title function_">setDate</span>(date.<span class="hljs-title function_">getDate</span>() + expires)).<span class="hljs-title function_">toGMTString</span>();<br>  &#125;<br>  <span class="hljs-keyword">let</span> cookie = <span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>=<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(value)&#125;</span>;expires=<span class="hljs-subst">$&#123;expires&#125;</span>`</span>;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(args).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    cookie += <span class="hljs-string">`;<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;args[key]&#125;</span>`</span>;<br>  &#125;);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = cookie;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此cookie不适合做大数据量的存储，相比之下，Web Storage更适合存储大量数据:</p><h3 id="2-Web-Storage"><a href="#2-Web-Storage" class="headerlink" title="2. Web Storage"></a>2. Web Storage</h3><p>每个域名下可提供5M的存储容量（不同浏览器可能有差异，比如IE是10M）<br>以key&#x2F;value键值对的方式存储字符串，方便数据存取操作<br>只存储在客户端本地，不会随请求发送给服务端<br>Web Storage分为两种，即sessionStorage和localStorage，<br>两种对象的使用方法和api基本相同：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">const storage = sessionStorage || localStorage;<br><span class="hljs-regexp">//</span> 设置xxx的值为<span class="hljs-string">&#x27;yyy&#x27;</span><br>storage.setItem(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-string">&#x27;yyy&#x27;</span>);<br><span class="hljs-regexp">//</span> 获取xxx的值<br>storage.getItem(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br><span class="hljs-regexp">//</span> 删除xxx及其值<br>storage.removeItem(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br><span class="hljs-regexp">//</span> 获取键值对的数量<br>storage.length;<br><span class="hljs-regexp">//</span> 清空所有值<br>storage.clear();<br></code></pre></td></tr></table></figure><p>以下是sessionStorage和localStorage之间的区别：</p><p>sessionStorage 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。<br>localStorage 同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</p><h3 id="3-VueX"><a href="#3-VueX" class="headerlink" title="3. VueX"></a>3. VueX</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h4 id="3-1-State"><a href="#3-1-State" class="headerlink" title="3.1 State"></a>3.1 State</h4><p>用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。</p><p>State提供唯一公共数据源，所有共享数据统一放置Store的State中存储（通常项目中state[本质是一个对象]放在store文件夹之中）</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">//创建store数据源，<br><span class="hljs-keyword">const</span> store = new Vuex.Store(&#123;<br>    <span class="hljs-keyword">state</span>:&#123;count:<span class="hljs-number">0</span>&#125;<br>&#125;)<br>//或者<br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    <span class="hljs-keyword">state</span>:&#123;count:<span class="hljs-number">0</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>组件访问State数据方式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一种<br><br>this.<span class="hljs-variable">$store</span>.state.全局数据名称<br><br><span class="hljs-regexp">//</span>在template当中使用可以省略this<br><br><span class="hljs-regexp">//</span>-------------------------------<br><span class="hljs-regexp">//</span>第二种方式<br>&lt;template&gt;<br>    &lt;h1&gt;<br>        &#123;&#123;count&#125;&#125;<br>    &lt;/h1&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>    import &#123; mapState &#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br>    <br>    export default &#123;<br>        data()&#123;<br>            return &#123;&#125;<br>        &#125;,<br>        computed:&#123;<br>            ...mapState([<span class="hljs-string">&#x27;count&#x27;</span>])<br>            <span class="hljs-regexp">//</span> 映射 this.count 为 store.state.count<br>            <span class="hljs-regexp">//</span>...对象展开运算符：将此对象混入到外部对象中。<br>            <span class="hljs-regexp">//</span>详细说明：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/weixin_41642136/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">111666448</span><br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="3-2-Getter"><a href="#3-2-Getter" class="headerlink" title="3.2 Getter"></a>3.2 Getter</h4><p>Getter用于对Store数据加工处理，相当于Vue的计算属性的功能。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-keyword">state</span>: &#123;<br>    todos: [<br>      &#123; id: <span class="hljs-number">1</span>, text: &#x27;...&#x27;, done: true &#125;,<br>      &#123; id: <span class="hljs-number">2</span>, text: &#x27;...&#x27;, done: false &#125;<br>    ],<br>    count:<span class="hljs-number">0</span><br>  &#125;,<br>  getters: &#123;<br>    showNum:<span class="hljs-keyword">state</span>=&gt;&#123;<br>        return &#x27;当前最新数据是[&#x27;+<span class="hljs-keyword">state</span>.count+&#x27;]&#x27;<br>    &#125;,<br>    <br>    doneTodos (<span class="hljs-keyword">state</span>) &#123;<br>      return <span class="hljs-keyword">state</span>.todos.filter(todo =&gt; todo.done)<br>    &#125;,<br>    <br>    getTodoById: (<span class="hljs-keyword">state</span>) =&gt; (id) =&gt; &#123;<br>    return <span class="hljs-keyword">state</span>.todos.find(todo =&gt; todo.id === id)<br>    &#125;,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>访问getters：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一种<br><br>this.<span class="hljs-variable">$store</span>.getters.showNum<br>this.<span class="hljs-variable">$store</span>.getters.doneTodos<br>this.<span class="hljs-variable">$store</span>.getters.getTodoById(<span class="hljs-number">2</span>)<br><br><span class="hljs-regexp">//</span>第二种<br><br>import &#123; mapGetters &#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>export default &#123;<br><br>  ...<br>  <br>  computed: &#123;<br>  <span class="hljs-regexp">//</span> 使用对象展开运算符将 getter 混入 computed 对象中<br>    ...mapGetters([<br>      <span class="hljs-string">&#x27;doneTodosCount&#x27;</span>,<br>      <span class="hljs-string">&#x27;anotherGetter&#x27;</span>,<br>    ])<br>    <br>    ...mapGetters(&#123;<br>    <span class="hljs-regexp">//</span> 把 `this.doneCount` 映射为 `this.<span class="hljs-variable">$store</span>.getters.doneTodosCount`<br>    doneCount: <span class="hljs-string">&#x27;doneTodosCount&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-Murtation"><a href="#3-3-Murtation" class="headerlink" title="3.3 Murtation"></a>3.3 Murtation</h4><p>Murtation：一般用于变更Store当中的数据</p><p>store当中不可在js代码当中直接用<code>this.$store.state.全局数据名称</code>去修改数据，<br>Vuex提供一种修改的 store 中的状态的唯一方法是提交 mutation。</p><p>每个 mutation 都有一个字符串的事件类型 (type)和一个回调函数 (handler)。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">//定义mutations<br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-keyword">state</span>: &#123;<br>    count: <span class="hljs-number">0</span><br>  &#125;,<br>  mutations: &#123;<br>    increment_1 (<span class="hljs-keyword">state</span>) &#123;<br>      // 变更状态<br>      <span class="hljs-keyword">state</span>.count++<br>    &#125;,<br>    increment_2 (<span class="hljs-keyword">state</span>, payload) &#123;<br>    <span class="hljs-keyword">state</span>.count += payload.amount<br>    &#125;<br>    <br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>访问mutations</strong>：</p><p>1.使用&#x3D;&#x3D;this.$store,commit()&#x3D;&#x3D;</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">methods:&#123;<br>    函数名()&#123;<br>        <span class="hljs-keyword">this</span>.$store,commit(<span class="hljs-string">&#x27;increment_1&#x27;</span>)<br>        <br>        <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&#x27;increment_2&#x27;</span>, &#123;amount: <span class="hljs-number">10</span>&#125;)<br>        <br>        <span class="hljs-keyword">this</span>.$store.commit(&#123;type: <span class="hljs-string">&#x27;increment&#x27;</span>,amount: <span class="hljs-number">10</span>&#125;)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.使用mapMutations</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//1.从VueX种按需导入mapMutations函数</span><br><span class="hljs-keyword">import</span> &#123; mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure><p>使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">//<span class="hljs-number">2</span>.将指定的mutations函数，映射未当前组件methods<br>methods:&#123;<br>    ..<span class="hljs-selector-class">.mapMutations</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;increment_1&#x27;</span>]</span>,<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;increment_2&#x27;</span>]</span>)<br>    <br>    ..<span class="hljs-selector-class">.mapMutations</span>(&#123;<br>      add: <span class="hljs-string">&#x27;increment&#x27;</span> // 将 `this.<span class="hljs-built_in">add</span>()` 映射为 `this.$store.<span class="hljs-built_in">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)`<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-Action"><a href="#3-4-Action" class="headerlink" title="3.4 Action"></a>3.4 Action</h4><p>Action用于处理异步任务，通过触发Mutation的方式间接变更数据。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-keyword">state</span>: &#123;<br>    count: <span class="hljs-number">0</span><br>  &#125;,<br>  mutations: &#123;<br>    increment (<span class="hljs-keyword">state</span>) &#123;<br>      <span class="hljs-keyword">state</span>.count++<br>    &#125;<br>  &#125;,<br>  actions: &#123;<br>    increment (context) &#123;<br>        <span class="hljs-built_in">set</span>Timeout((=&gt;&#123;<br>            context.commit(&#x27;increment&#x27;)<br>        &#125;,<span class="hljs-number">1000</span>)<br>    &#125;<br>  &#125;,<br>  //实践中，我们会经常用到 ES2015的参数解构来简化代码（特别是我们需要调用 commit 很多次的时候）：<br>  <br>  actions: &#123;<br>  increment (&#123; commit &#125;) &#123;<br>    commit(&#x27;increment&#x27;)<br>  &#125;<br>&#125;<br>  <br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>触发Action：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一种<br>methods:&#123;<br>    函数名()&#123;<br>        this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>        <span class="hljs-regexp">//</span> 以载荷形式分发<br>        this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;incrementAsync&#x27;</span>, &#123;<br>                amount: <span class="hljs-number">10</span><br>            &#125;)<br><br>        <span class="hljs-regexp">//</span> 以对象形式分发<br>        this.<span class="hljs-variable">$store</span>.dispatch(&#123;<br>            type: <span class="hljs-string">&#x27;incrementAsync&#x27;</span>,<br>            amount: <span class="hljs-number">10</span><br>            &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-regexp">//</span>第二种<br>import &#123; mapActions &#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>export default &#123;<br>  <span class="hljs-regexp">//</span> ...<br>  methods: &#123;<br>    ...mapActions([<br>      <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-regexp">//</span> 将 `this.increment()` 映射为 `this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;increment&#x27;</span>)`<br><br>      <span class="hljs-regexp">//</span> `mapActions` 也支持载荷：<br>      <span class="hljs-string">&#x27;incrementBy&#x27;</span> <span class="hljs-regexp">//</span> 将 `this.incrementBy(amount)` 映射为 `this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;incrementBy&#x27;</span>, amount)`<br>    ]),<br>    ...mapActions(&#123;<br>      add: <span class="hljs-string">&#x27;increment&#x27;</span> <span class="hljs-regexp">//</span> 将 `this.add()` 映射为 `this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;increment&#x27;</span>)`<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-Module"><a href="#3-5-Module" class="headerlink" title="3.5 Module"></a>3.5 Module</h4><p>Vuex 允许我们将 store分割成模块(module)，每个模块拥有自己的state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-keyword">state</span>: () =&gt; (&#123; ... &#125;),<br>  mutations: &#123; ... &#125;,<br>  actions: &#123; ... &#125;,<br>  getters: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  <span class="hljs-keyword">state</span>: () =&gt; (&#123; ... &#125;),<br>  mutations: &#123; ... &#125;,<br>  actions: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  modules: &#123;<br>    a: moduleA,<br>    b: moduleB<br>  &#125;<br>&#125;)<br><br>store.<span class="hljs-keyword">state</span>.a // -&gt; moduleA 的状态<br>store.<span class="hljs-keyword">state</span>.b // -&gt; moduleB 的状态<br></code></pre></td></tr></table></figure><p><strong>模块局部状态</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-keyword">state</span>: () =&gt; (&#123;<br>    count: <span class="hljs-number">0</span><br>  &#125;),<br>  <br>  mutations: &#123;<br>    increment (<span class="hljs-keyword">state</span>) &#123;<br>    <br>      // 这里的 `<span class="hljs-keyword">state</span>` 对象是模块的局部状态<br>      <span class="hljs-keyword">state</span>.count++<br>    &#125;<br>  &#125;,<br>  <br>  getters: &#123;<br>  <br>    doubleCount (<span class="hljs-keyword">state</span>) &#123;<br>      return <span class="hljs-keyword">state</span>.count * <span class="hljs-number">2</span><br>    &#125;,<br>    <br>    //对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：<br>    <br>    sumWithRootCount (<span class="hljs-keyword">state</span>, getters, rootState) &#123;<br>      return <span class="hljs-keyword">state</span>.count + rootState.count<br>    &#125;<br>    <br>  &#125;,<br>  <br>  actions: &#123;<br>  //对于模块内部的 action，局部状态通过 context.<span class="hljs-keyword">state</span> 暴露出来，根节点状态则为 context.rootState：<br>  <br>    incrementIfOddOnRootSum (&#123; <span class="hljs-keyword">state</span>, commit, rootState &#125;) &#123;<br>      if ((<span class="hljs-keyword">state</span>.count + rootState.count) % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) &#123;<br>        commit(&#x27;increment&#x27;)<br>      &#125;<br>    &#125;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>命名空间</strong></p><p>启用了命名空间的 getter 和 action 会收到局部化的 getter，dispatch 和 commit。换言之，你在使用模块内容（module assets）时不需要在同一模块内额外添加空间名前缀。更改 namespaced 属性后不需要修改模块内的代码。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs awk">const store = createStore(&#123;<br>  modules: &#123;<br>    account: &#123;<br>      namespaced: true,<span class="hljs-regexp">//</span>开启命名空间<br><br>      <span class="hljs-regexp">//</span> 模块内容（module assets）<br>      state: () =&gt; (&#123; ... &#125;), <span class="hljs-regexp">//</span> 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响<br>      getters: &#123;<br>        isAdmin () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; getters[<span class="hljs-string">&#x27;account/isAdmin&#x27;</span>]<br>      &#125;,<br>      actions: &#123;<br>        login () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; dispatch(<span class="hljs-string">&#x27;account/login&#x27;</span>)<br>      &#125;,<br>      mutations: &#123;<br>        login () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; commit(<span class="hljs-string">&#x27;account/login&#x27;</span>)<br>      &#125;,<br><br>      <span class="hljs-regexp">//</span> 嵌套模块<br>      modules: &#123;<br>        <span class="hljs-regexp">//</span> 继承父模块的命名空间<br>        myPage: &#123;<br>          state: () =&gt; (&#123; ... &#125;),<br>          getters: &#123;<br>            profile () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; getters[<span class="hljs-string">&#x27;account/profile&#x27;</span>]<br>          &#125;<br>        &#125;,<br><br>        <span class="hljs-regexp">//</span> 进一步嵌套命名空间<br>        posts: &#123;<br>          namespaced: true,<br><br>          state: () =&gt; (&#123; ... &#125;),<br>          getters: &#123;<br>            popular () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; getters[<span class="hljs-string">&#x27;account/posts/popular&#x27;</span>]<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>带命名空间模块访问全局内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs awk">modules: &#123;<br>  foo: &#123;<br>    namespaced: true,<br><br>    getters: &#123;<br>    <br>      <span class="hljs-regexp">//</span> 在这个模块的 getter 中，`getters` 被局部化了<br>      <span class="hljs-regexp">//</span> 你可以使用 getter 的第四个参数来调用 `rootGetters`<br>      <br>      someGetter (state, getters, rootState, rootGetters) &#123;<br>        getters.someOtherGetter <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;foo/someOtherGetter&#x27;</span><br>        rootGetters.someOtherGetter <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;someOtherGetter&#x27;</span><br>        rootGetters[<span class="hljs-string">&#x27;bar/someOtherGetter&#x27;</span>] <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;bar/someOtherGetter&#x27;</span><br>      &#125;,<br>      someOtherGetter: state =&gt; &#123; ... &#125;<br>    &#125;,<br><br>    actions: &#123;<br>    <br>      <span class="hljs-regexp">//</span> 在这个模块中， dispatch 和 commit 也被局部化了<br>      <span class="hljs-regexp">//</span> 他们可以接受 `root` 属性以访问根 dispatch 或 commit<br>      <br>      <br>      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;<br>        getters.someGetter <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;foo/someGetter&#x27;</span><br>        rootGetters.someGetter <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;someGetter&#x27;</span><br>        rootGetters[<span class="hljs-string">&#x27;bar/someGetter&#x27;</span>] <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;bar/someGetter&#x27;</span><br><br>        dispatch(<span class="hljs-string">&#x27;someOtherAction&#x27;</span>) <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;foo/someOtherAction&#x27;</span><br>        dispatch(<span class="hljs-string">&#x27;someOtherAction&#x27;</span>, null, &#123; root: true &#125;) <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;someOtherAction&#x27;</span><br><br>        commit(<span class="hljs-string">&#x27;someMutation&#x27;</span>) <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;foo/someMutation&#x27;</span><br>        commit(<span class="hljs-string">&#x27;someMutation&#x27;</span>, null, &#123; root: true &#125;) <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;someMutation&#x27;</span><br>      &#125;,<br>      someOtherAction (ctx, payload) &#123; ... &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-一些注意事项"><a href="#3-6-一些注意事项" class="headerlink" title="3.6 一些注意事项"></a>3.6 一些注意事项</h4><p><strong>1.store当中不可在js代码当中直接用<code>this.$store.state.全局数据名称</code>去修改state数据。</strong></p><p><strong>2.不要在mutations函数当中直接执行异步操作，例如：<code>setTimeout(()=&gt;&#123;...&#125;,100)</code></strong></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何配置Gitee与Github在同一Git环境</title>
    <link href="/2022/06/19/Git/"/>
    <url>/2022/06/19/Git/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>每次用Github的HTTP传博客代码都很慢，因为GitHub毕竟是境外的，所以为了解决GitHub上传代码慢，网站老是进不去的问题，可以利用国内的<a href="https://gitee.com/">码云Gitee网站</a>进行代码管理。</p><h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h3><p>首先你得有两个平台的账号，<br><a href="https://github.com/signup/">Github注册</a>，<a href="https://blog.csdn.net/weixin_45738527/article/details/105146064/">GitHub教程</a><br><a href="https://gitee.com/signup/">Gitee注册</a>，<a href="https://gitee.com/help/articles/4113/">Gitee教程</a><br>跟着链接步骤先注册一下吧！</p><h3 id="3-SSH配置"><a href="#3-SSH配置" class="headerlink" title="3.SSH配置"></a>3.SSH配置</h3><h4 id="3-1清除已有git配置"><a href="#3-1清除已有git配置" class="headerlink" title="3.1清除已有git配置"></a>3.1清除已有git配置</h4><p>如果你之前已经安装了git，并且也配置过了全局的user.name和user.email，那么现在就应该全部清除，清除方法如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> <span class="hljs-params">--unset</span> user.name <span class="hljs-string">&quot;YourName&quot;</span><br>git config <span class="hljs-params">--global</span> <span class="hljs-params">--unset</span> user.email <span class="hljs-string">&quot;YourEmail&quot;</span><br><span class="hljs-string">//</span>注意： 这里的<span class="hljs-string">&quot;YourName&quot;</span>和<span class="hljs-string">&quot;YourEmail&quot;</span>要换成你自己的名称和邮箱<br></code></pre></td></tr></table></figure><h4 id="3-2生成SSH密匙"><a href="#3-2生成SSH密匙" class="headerlink" title="3.2生成SSH密匙"></a>3.2生成SSH密匙</h4><p><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/SSH.html/">什么是SSH？</a></p><p><strong>如果没有找到ssh文件夹？</strong></p><p>1.打开Git Bash，写上命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> “XXX”<br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;XXX@XXX.com&quot;</span><br></code></pre></td></tr></table></figure><p>2.输入如下命令，然后连续按三个回车即可：</p><p><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p><p>3.然后会出来提示<br><code>Enter file in which to save the key</code> 后面跟着的便是ssh文件夹路径。</p><p><strong>如果已有ssh文件夹</strong></p><p>（１）github密钥<br>进入你的ssh文件夹路径,按住shift再点击鼠标右键，选择powershall打开(或者使用cmd窗口切换到.shh路径)，输入命令：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`ssh-keygen -t rsa -C <span class="hljs-string">&quot;YourGIthubEmail@mail.com&quot;</span> -f <span class="hljs-string">&quot;github_id_rsa&quot;</span>`<br></code></pre></td></tr></table></figure><p>然后<strong>敲击两次回车</strong>，</p><p>之后运行命令<code>cat github_id_rsa.pub</code>输出文件公钥内容，复制公钥内容并添加到github的设置当中的SSH Keys中保存．</p><p>（２）gitee密钥<br>同样操作，</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;YourGiteeEmail@mail.com&quot;</span> -f <span class="hljs-string">&quot;gitee_id_rsa&quot;</span><br></code></pre></td></tr></table></figure><p>复制公钥gitee_id_rsa.pub公钥的内容，并添加到gitee的SSH Keys中保存．</p><h4 id="3-3创建config文件避免ssh冲突"><a href="#3-3创建config文件避免ssh冲突" class="headerlink" title="3.3创建config文件避免ssh冲突"></a>3.3创建config文件避免ssh冲突</h4><p>在~&#x2F;.ssh文件夹下新建config文件（<strong>注意一定不要添加任何后缀</strong>），用记事本打开后添加以下内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Gitee</span><br><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/gi</span>tee_id_rsa<br><br><span class="hljs-comment"># GitHub</span><br><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/gi</span>thub_id_rsa<br></code></pre></td></tr></table></figure><p>然后保存后退出右击该文件：<br><strong>属性→安全→高级→禁止继承→删除所有继承→确定</strong></p><h3 id="4测试"><a href="#4测试" class="headerlink" title="4测试"></a>4测试</h3><p>1.执行<code>ssh -T git@github.com</code>，如果返回successfully则github配置成功．<br>2.执行<code>ssh -T git@gitee.com</code>，如果返回successfully则gitee配置成功．</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitee</tag>
      
      <tag>Github</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python+selenium爬取b站Top100数据</title>
    <link href="/2022/05/13/Python/"/>
    <url>/2022/05/13/Python/</url>
    
    <content type="html"><![CDATA[<h2 id="1-selenium库"><a href="#1-selenium库" class="headerlink" title="1.selenium库"></a>1.selenium库</h2><p>Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成.Net、Java、Perl等不同语言的测试脚本。</p><h2 id="2-selenium库的安装"><a href="#2-selenium库的安装" class="headerlink" title="2.selenium库的安装"></a>2.selenium库的安装</h2><p>在python中安装selenium库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip/pip3 install selenium<br></code></pre></td></tr></table></figure><h2 id="3-浏览器的驱动安装"><a href="#3-浏览器的驱动安装" class="headerlink" title="3.浏览器的驱动安装"></a>3.浏览器的驱动安装</h2><p>下载链接：<a href="https://chromedriver.storage.googleapis.com/index.html">浏览器驱动</a><br>我这里使用的是谷歌浏览器，点击链接，找到对应浏览器的相应版本安装，浏览器的设置——关于 可以查询浏览器的版本，下载解压之后得到一个exe文件，放到chrome浏览器的安装目录下即可</p><p>（我的目录路径是C:\Users\丑丑a\Downloads\chromedriver.exe）</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">from selenium import webdriver<br>driver = webdriver.Chrome(executable_path=r<span class="hljs-string">&quot;C:\Users\丑丑a\Downloads\chromedriver.exe&quot;</span>)<br>driver.get(<span class="hljs-string">&quot;https://www.bilibili.com/v/popular/rank/all&quot;</span>)<br></code></pre></td></tr></table></figure><p>若能自动打开浏览器，即安装成功。</p><h3 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs bash">from selenium import webdriver<br>import time<br>import pandas as pd<br><br>def main():<br>    driver = webdriver.Chrome(executable_path=r<span class="hljs-string">&quot;C:\Users\丑丑a\Downloads\chromedriver.exe&quot;</span>)<br>    <span class="hljs-comment"># 声明爬取网站</span><br>    driver.get(<span class="hljs-string">&quot;https://www.bilibili.com/v/popular/rank/all&quot;</span>)<br><br>    Order = []  <span class="hljs-comment"># 榜单次序</span><br>    Title = []  <span class="hljs-comment"># 视频标题</span><br>    Up = []     <span class="hljs-comment"># 视频Up主</span><br>    Click = []   <span class="hljs-comment"># 视频点击量</span><br>    View = []   <span class="hljs-comment"># 视频评价数</span><br>    Link = []   <span class="hljs-comment"># 视频链接</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;/html/body/div/div/div/div/ul/li/div/div/i/span&quot;</span>):<br>        Order.append(i.text)<br>        <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;//div/ul/li/div/div/a&quot;</span>):<br>        <span class="hljs-keyword">if</span>(i.text != <span class="hljs-string">&quot;&quot;</span>):<br>            Title.append(i.text)<br>            <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;app&#x27;]/div/div/div/ul/li/div/div/div/a/span&quot;</span>):<br>        Up.append(i.text)<br>        <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;app&#x27;]/div/div/div/ul/li/div/div/div/div/span[1]&quot;</span>):<br>        Click.append(i.text)<br>        <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;app&#x27;]/div/div/div/ul/li/div/div/div/div/span[2]&quot;</span>):<br>        View.append(i.text)<br>        <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">link</span> <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;app&quot;]/div/div/div/ul/li/div/div[2]/a&#x27;</span>):<br>        a = link.get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>)<br>        Link.append(a)<br>        <span class="hljs-comment"># print(a)</span><br><br>    data1 = [Order, Title, Up, Click, View, Link]<br>    data2 = each_Data(Link)<br><br>    saveData(data1, data2)  <span class="hljs-comment"># 保存数据</span><br>    driver.quit()  <span class="hljs-comment"># 关闭浏览器</span><br><br>def saveData(data1, data2):<br>    result =&#123;<br>        <span class="hljs-string">&quot;序号&quot;</span>: data1[0],<br>        <span class="hljs-string">&quot;标题&quot;</span>: data1[1],<br>        <span class="hljs-string">&quot;Up主&quot;</span>: data1[2],<br>        <span class="hljs-string">&quot;播放量&quot;</span>: data1[3],<br>        <span class="hljs-string">&quot;评论数&quot;</span>: data1[4],<br>        <span class="hljs-string">&quot;视频链接&quot;</span>: data1[5],<br>        <span class="hljs-string">&quot;点赞数&quot;</span>: data2[0],<br>        <span class="hljs-string">&quot;投币数&quot;</span>: data2[1],<br>        <span class="hljs-string">&quot;收藏数&quot;</span>: data2[2],<br>        <span class="hljs-string">&quot;转发数&quot;</span>: data2[3]<br>    &#125;<br>    <span class="hljs-comment"># 导入数据</span><br>    <span class="hljs-built_in">df</span> = pd.DataFrame(result)<br>    <span class="hljs-comment"># 获取时间</span><br>    now = time.localtime()<br>    now = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d-%H-%M&quot;</span>, now)<br>    <span class="hljs-comment"># 声明文件名称</span><br>    csv_name=<span class="hljs-string">&quot;BilibiliTop100&quot;</span>+now+<span class="hljs-string">&quot;.csv&quot;</span><br>    df.to_csv(csv_name, encoding=<span class="hljs-string">&quot;utf_8_sig&quot;</span>)<br><br>def each_Data(Link):<br>    Like = []   <span class="hljs-comment"># 点赞数</span><br>    Coin = []   <span class="hljs-comment"># 投币数</span><br>    Collect = []    <span class="hljs-comment"># 收藏数</span><br>    Share = []  <span class="hljs-comment"># 转发数</span><br>    driver = webdriver.Chrome(executable_path=r<span class="hljs-string">&quot;C:\Users\丑丑a\Downloads\chromedriver.exe&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,100):<br>        <span class="hljs-comment"># 声明爬取网站</span><br>        driver.get(Link[i])<br><br>        like = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;arc_toolbar_report&quot;]/div[1]/span[1]&#x27;</span>)<br>        like = like.text<br><br>        coin = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;arc_toolbar_report&quot;]/div[1]/span[2]&#x27;</span>)<br>        coin = coin.text<br><br>        collect = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;arc_toolbar_report&quot;]/div[1]/span[3]&#x27;</span>)<br>        collect = collect.text<br><br>        share = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;arc_toolbar_report&quot;]/div[1]/span[4]&#x27;</span>)<br>        share = share.text<br>        Like.append(like)<br>        Coin.append(coin)<br>        Collect.append(collect)<br>        Share.append(share)<br><br>    data = [Like, Coin, Collect, Share]<br>    <span class="hljs-comment"># print(data)</span><br>    driver.quit()<br>    <span class="hljs-built_in">return</span> data<br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>结果：<br><img src="https://s2.loli.net/2022/07/15/uH4KCO5X9A3qz7b.png" alt="reslut.png"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
